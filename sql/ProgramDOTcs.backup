using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using WorkoutTrackerWeb.Data;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Session;
using Microsoft.Extensions.Caching.Distributed;
using WorkoutTrackerWeb.Services;
using WorkoutTrackerWeb.Services.Email;
using WorkoutTrackerWeb.Services.Session;
using WorkoutTrackerWeb.Services.VersionManagement;
using WorkoutTrackerWeb.Services.Hangfire;
using WorkoutTrackerWeb.Services.Logging;
using WorkoutTrackerWeb.Services.Alerting;
using WorkoutTrackerWeb.Services.Calculations;
using WorkoutTrackerWeb.Middleware;
using WorkoutTrackerWeb.Hubs;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.DataProtection;
using System.IO;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using System.Text.Json;
using System.Net.Mime;
using Prometheus;
using HealthChecks.UI.Client;
using AspNetCoreRateLimit;
using Serilog;
using Serilog.Events;
using Serilog.Context;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Hangfire;
using Hangfire.SqlServer;
using Hangfire.Dashboard;
using Microsoft.Data.SqlClient;
using Microsoft.AspNetCore.StaticFiles;
using StackExchange.Redis;
using HealthChecks.Redis;
using HealthChecks.System;
using Microsoft.AspNetCore.HttpOverrides;
using WorkoutTrackerWeb.Services.TempData;
using Microsoft.EntityFrameworkCore.SqlServer;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Diagnostics;
using WorkoutTrackerWeb.HealthChecks;

Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(new ConfigurationBuilder()
        .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
        .AddJsonFile($"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production"}.json", optional: true, reloadOnChange: true)
        .AddEnvironmentVariables()
        .Build())
    .CreateLogger();

try
{
    Log.Information("Starting up WorkoutTracker application");

    var builder = WebApplication.CreateBuilder(args);

    string[] trustedDomains = new[] {
        "workouttracker.online", 
        "www.workouttracker.online",
        "wot.ninjatec.co.uk",
        "localhost",
        "localhost:5001",
        "localhost:5000"
    };

    builder.Host.UseSerilog();

    builder.Services.AddHostFiltering(options => {
        options.AllowedHosts = trustedDomains;
        options.AllowEmptyHosts = true;
        options.IncludeFailureMessage = true;
    });

    Log.Information("Host filtering configured with allowed hosts: {AllowedHosts}", string.Join(", ", trustedDomains));

    builder.Services.Configure<ForwardedHeadersOptions>(options =>
    {
        options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;
        options.KnownNetworks.Clear();
        options.KnownProxies.Clear();
        options.ForwardLimit = null;
    });

    builder.Services.Configure<CookiePolicyOptions>(options =>
    {
        options.CheckConsentNeeded = context => true;
        options.MinimumSameSitePolicy = SameSiteMode.None;
        options.Secure = CookieSecurePolicy.Always;
    });

    builder.Services.AddMemoryCache();

    builder.Services.Configure<IpRateLimitOptions>(builder.Configuration.GetSection("IpRateLimiting"));
    builder.Services.Configure<IpRateLimitPolicies>(builder.Configuration.GetSection("IpRateLimitPolicies"));
    builder.Services.AddInMemoryRateLimiting();
    builder.Services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();

    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
    builder.Services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlServer(connectionString));
    builder.Services.AddDatabaseDeveloperPageExceptionFilter();

    builder.Services.AddLoggingServices();
    builder.Services.AddHostedService<WorkoutTrackerWeb.Services.Logging.LogLevelConfigurationHostedService>();

    builder.Services.AddHttpClient();

    builder.Services.AddSingleton<HangfireServerConfiguration>();

    builder.Services.AddHangfire(configuration => configuration
        .SetDataCompatibilityLevel(CompatibilityLevel.Version_180)
        .UseSimpleAssemblyNameTypeSerializer()
        .UseRecommendedSerializerSettings()
        .UseSqlServerStorage(connectionString, new SqlServerStorageOptions
        {
            CommandBatchMaxTimeout = TimeSpan.FromMinutes(5),
            SlidingInvisibilityTimeout = TimeSpan.FromMinutes(5),
            QueuePollInterval = TimeSpan.FromSeconds(15),
            UseRecommendedIsolationLevel = true,
            DisableGlobalLocks = false,
            SchemaName = "HangFire",
            PrepareSchemaIfNecessary = true
        }));

    using (var scope = builder.Services.BuildServiceProvider().CreateScope())
    {
        var hangfireConfig = scope.ServiceProvider.GetRequiredService<HangfireServerConfiguration>();
        
        if (hangfireConfig.IsProcessingEnabled) 
        {
            Log.Information("Registering this instance as a Hangfire server with {WorkerCount} workers", hangfireConfig.WorkerCount);
            builder.Services.AddHangfireServer(options => {
                hangfireConfig.ConfigureServerOptions(options);
            });
        }
        else
        {
            Log.Information("Hangfire processing is disabled for this instance - NOT registering as a server");
        }
    }

    Func<string, Action<SqlServerDbContextOptionsBuilder>, DbContextOptionsBuilder> getSqlOptions = (connString, sqlOptionsAction) =>
    {
        var poolingConfig = builder.Configuration.GetSection("DatabaseConnectionPooling");
        int maxPoolSize = poolingConfig.GetValue<int>("MaxPoolSize", 200);
        int minPoolSize = poolingConfig.GetValue<int>("MinPoolSize", 10);
        int connectionLifetime = poolingConfig.GetValue<int>("ConnectionLifetime", 300);
        bool connectionResetEnabled = poolingConfig.GetValue<bool>("ConnectionResetEnabled", true);
        int loadBalanceTimeout = poolingConfig.GetValue<int>("LoadBalanceTimeout", 30);
        int retryCount = poolingConfig.GetValue<int>("RetryCount", 5);
        int retryInterval = poolingConfig.GetValue<int>("RetryInterval", 10);
        
        var sqlConnectionBuilder = new SqlConnectionStringBuilder(connString)
        {
            MaxPoolSize = maxPoolSize,
            MinPoolSize = minPoolSize,
            ConnectTimeout = loadBalanceTimeout,
            LoadBalanceTimeout = loadBalanceTimeout,
            ConnectRetryCount = retryCount,
            ConnectRetryInterval = retryInterval
        };

        string enhancedConnectionString = sqlConnectionBuilder.ConnectionString;
        if (connectionLifetime > 0)
        {
            enhancedConnectionString += $";Connection Lifetime={connectionLifetime}";
        }
        
        if (connectionResetEnabled && OperatingSystem.IsWindows())
        {
            enhancedConnectionString += $";Connection Reset=true";
        }
        
        var optionsBuilder = new DbContextOptionsBuilder<WorkoutTrackerWebContext>();
        optionsBuilder.UseSqlServer(enhancedConnectionString, sqlOptionsAction)
            .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking)
            .EnableSensitiveDataLogging(builder.Environment.IsDevelopment());
            
        return optionsBuilder;
    };

    builder.Services.AddDbContext<DataProtectionKeysDbContext>(options =>
        options.UseSqlServer(connectionString));

    builder.Services.AddDataProtection()
        .PersistKeysToDbContext<DataProtectionKeysDbContext>()
        .SetApplicationName("WorkoutTracker")
        .SetDefaultKeyLifetime(TimeSpan.FromDays(90));

    builder.Services.AddDefaultIdentity<WorkoutTrackerWeb.Models.Identity.AppUser>(options => 
    {
        options.SignIn.RequireConfirmedAccount = true;
        options.SignIn.RequireConfirmedEmail = true;
        options.Password.RequireDigit = true;
        options.Password.RequireLowercase = true;
        options.Password.RequireUppercase = true;
        options.Password.RequireNonAlphanumeric = true;
        options.Password.RequiredLength = 8;
        options.User.RequireUniqueEmail = true;
        options.User.AllowedUserNameCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+";
    })
        .AddRoles<IdentityRole>()
        .AddEntityFrameworkStores<ApplicationDbContext>()
        .AddUserValidator<CustomUserValidator>();

    builder.Services.AddScoped<CustomUsernameManager>();

    builder.Services.AddAuthorization(options =>
    {
        options.AddPolicy("RequireAdminRole", policy => policy.RequireRole("Admin"));
        options.AddPolicy("RequireCoachRole", policy => policy.RequireRole("Coach"));
    });

    builder.Services.Configure<EmailSettings>(builder.Configuration.GetSection("EmailSettings"));
    builder.Services.AddTransient<IEmailService, WorkoutTrackerWeb.Services.Email.EmailService>();
    builder.Services.AddTransient<IEmailSender, EmailSenderAdapter>();

    try
    {
        if (builder.Environment.IsDevelopment())
        {
            builder.Services.AddSignalR(options => {
                options.EnableDetailedErrors = true;
                options.MaximumReceiveMessageSize = 102400;
                options.ClientTimeoutInterval = TimeSpan.FromSeconds(30);
                options.HandshakeTimeout = TimeSpan.FromSeconds(15);
            });
            Log.Information("Configured SignalR with in-memory backplane for development");
        }
        else
        {
            try
            {
                var redisConnectionString = builder.Configuration.GetConnectionString("Redis") ?? 
                                        Environment.GetEnvironmentVariable("ConnectionStrings__Redis") ?? 
                                        "redis-master.web.svc.cluster.local:6379,abortConnect=false";
                                        
                var redisOptions = ConfigureRedisOptions(redisConnectionString);
                
                builder.Services.AddSignalR(options => {
                    options.EnableDetailedErrors = true;
                    options.MaximumReceiveMessageSize = 102400;
                    options.ClientTimeoutInterval = TimeSpan.FromSeconds(30);
                    options.HandshakeTimeout = TimeSpan.FromSeconds(15);
                    options.KeepAliveInterval = TimeSpan.FromSeconds(15);
                }).AddStackExchangeRedis(options => 
                {
                    options.Configuration = redisOptions;
                    options.ConnectionFactory = async writer => 
                    {
                        var connection = await ConnectionMultiplexer.ConnectAsync(redisOptions, writer);
                        connection.ConnectionFailed += (_, e) => 
                        {
                            Log.Warning("Redis connection failed: {EndPoint}, {FailureType}", e.EndPoint, e.FailureType);
                        };
                        connection.ConnectionRestored += (_, e) => 
                        {
                            Log.Information("Redis connection restored: {EndPoint}", e.EndPoint);
                        };
                        connection.ErrorMessage += (_, e) =>
                        {
                            Log.Warning("Redis error: {Message}", e.Message);
                        };
                        return connection;
                    };
                });
                Log.Information("Configured SignalR with Redis backplane using {ConnectionString}", redisConnectionString);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Failed to configure SignalR with Redis backplane, falling back to in-memory");
                builder.Services.AddSignalR(options => {
                    options.EnableDetailedErrors = true;
                    options.MaximumReceiveMessageSize = 102400;
                    options.ClientTimeoutInterval = TimeSpan.FromSeconds(30);
                    options.HandshakeTimeout = TimeSpan.FromSeconds(15);
                });
                Log.Warning("Using in-memory SignalR backplane in production due to Redis configuration failure");
            }
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Error configuring SignalR services");
        throw;
    }

    if (builder.Environment.IsDevelopment())
    {
        Log.Information("Using in-memory distributed cache for development environment");
        builder.Services.AddDistributedMemoryCache();
        
        builder.Services.AddScoped<ISharedStorageService>(sp => {
            var logger = sp.GetRequiredService<ILogger<RedisSharedStorageService>>();
            return new RedisSharedStorageService(null, logger);
        });
    }
    else
    {
        var redisConfigString = builder.Configuration.GetConnectionString("Redis") ?? 
                             Environment.GetEnvironmentVariable("ConnectionStrings__Redis") ?? 
                             "redis-master.web.svc.cluster.local:6379,abortConnect=false";

        try {
            var redisOptions = ConfigureRedisOptions(redisConfigString);
            
            builder.Services.AddSingleton<IConnectionMultiplexer>(sp => {
                var logger = sp.GetRequiredService<ILogger<Program>>();
                try {
                    var redisOptions = ConfigureRedisOptions(redisConfigString);
                    
                    var connection = ConnectionMultiplexer.Connect(redisOptions);
                    
                    var hasWritableEndpoint = false;
                    foreach (var endpoint in connection.GetEndPoints())
                    {
                        var server = connection.GetServer(endpoint);
                        if (!server.IsReplica)
                        {
                            logger.LogInformation("Connected to master Redis server at {Endpoint}", endpoint);
                            hasWritableEndpoint = true;
                            break;
                        }
                    }
                    
                    connection.ConnectionFailed += (_, e) => {
                        logger.LogWarning("Redis connection failed: {EndPoint}, {FailureType}", e.EndPoint, e.FailureType);
                    };
                    connection.ConnectionRestored += (_, e) => {
                        logger.LogInformation("Redis connection restored: {EndPoint}", e.EndPoint);
                    };
                    connection.ErrorMessage += (_, e) => {
                        logger.LogWarning("Redis error: {Message}", e.Message);
                    };
                    
                    return connection;
                } catch (Exception ex) {
                    logger.LogError(ex, "Failed to create Redis connection");
                    throw;
                }
            });
            
            builder.Services.AddStackExchangeRedisCache(options =>
            {
                options.ConfigurationOptions = redisOptions;
                options.InstanceName = "WorkoutTracker:";
            });
            
            builder.Services.AddScoped<ISharedStorageService, RedisSharedStorageService>();
            
            Log.Information("Configured Redis distributed cache for production using {ConnectionString} with enhanced resilience", redisConfigString);
        } catch (Exception ex) {
            Log.Error(ex, "Failed to configure Redis distributed cache, falling back to in-memory cache");
            builder.Services.AddDistributedMemoryCache();
            
            builder.Services.AddScoped<ISharedStorageService>(sp => {
                var logger = sp.GetRequiredService<ILogger<RedisSharedStorageService>>();
                return new RedisSharedStorageService(null, logger);
            });
            
            Log.Warning("Using in-memory distributed cache in production due to Redis configuration failure");
        }
    }

    builder.Services.AddMvc();

    builder.Services.AddHttpContextAccessor();

    builder.Services.AddScoped<IUserService, UserService>();

    builder.Services.AddScoped<WorkoutDataPortabilityService>();

    builder.Services.AddScoped<TrainAIImportService>();

    builder.Services.AddScoped<BackgroundJobService>();

    builder.Services.AddScoped<WorkoutDataService>();
    
    builder.Services.AddScoped<QuickWorkoutService>();

    var apiNinjasKey = builder.Configuration["ApiKeys:ApiNinjas"];
    if (string.IsNullOrEmpty(apiNinjasKey))
    {
        Log.Warning("API Ninjas key is not configured. Exercise enrichment functionality will not work correctly.");
    }
    else
    {
        Log.Information("API Ninjas key is configured successfully.");
    }

    builder.Services.AddHttpClient("ExerciseApi", client =>
    {
        client.BaseAddress = new Uri("https://api.api-ninjas.com/v1/exercises");
        client.DefaultRequestHeaders.Add("X-Api-Key", apiNinjasKey);
    });
    builder.Services.AddScoped<ExerciseApiService>();
    builder.Services.AddScoped<ExerciseTypeService>();
    builder.Services.AddScoped<ExerciseSelectionService>();

    builder.Services.AddScoped<HelpService>();

    builder.Services.AddScoped<LoginHistoryService>();

    builder.Services.AddScoped<IShareTokenService, ShareTokenService>();

    builder.Services.AddSingleton<TokenRateLimiter>();
    builder.Services.AddSingleton<ITokenRateLimiter>(provider => provider.GetRequiredService<TokenRateLimiter>());
    builder.Services.AddHostedService(provider => provider.GetRequiredService<TokenRateLimiter>());
    builder.Services.AddScoped<ITokenValidationService, TokenValidationService>();

    builder.Services.AddScoped<IVersionService, VersionService>();

    builder.Services.AddScoped<IHangfireInitializationService, HangfireInitializationService>();

    builder.Services.AddSingleton<DatabaseResilienceService>();

    builder.Services.AddScoped<IAlertingService, AlertingService>();

    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Hangfire.AlertingJobsService>();
    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Hangfire.AlertingJobsRegistration>();
    
    builder.Services.AddScoped<IVolumeCalculationService, VolumeCalculationService>();
    builder.Services.AddScoped<ICalorieCalculationService, CalorieCalculationService>();
    
    builder.Services.AddScoped<IWorkoutIterationService, WorkoutIterationService>();

    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Coaching.ICoachingService, WorkoutTrackerWeb.Services.Coaching.CoachingService>();
    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Coaching.GoalQueryService>();
    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Coaching.GoalProgressService>();
    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Coaching.GoalOperationsService>();
    
    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Validation.CoachingValidationService>();

    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Scheduling.ScheduledWorkoutProcessorService>();
    builder.Services.Configure<WorkoutTrackerWeb.Services.Scheduling.ScheduledWorkoutProcessorOptions>(builder.Configuration.GetSection("ScheduledWorkoutProcessor"));

    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Scheduling.WorkoutReminderService>();
    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Hangfire.WorkoutReminderJobsService>();
    builder.Services.AddScoped<WorkoutTrackerWeb.Services.Hangfire.WorkoutReminderJobsRegistration>();

    builder.Services.AddSession(options =>
    {
        options.IdleTimeout = TimeSpan.FromMinutes(30);
        options.Cookie.HttpOnly = true;
        options.Cookie.IsEssential = true;
        
        if (builder.Environment.IsDevelopment())
        {
            options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;
        }
        else
        {
            options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
        }
        
        if (!builder.Environment.IsDevelopment())
        {
            options.Cookie.Domain = ".workouttracker.online";
        }
        
        options.Cookie.Name = "WorkoutTracker.Session";
    });

    if (builder.Environment.IsDevelopment())
    {
        builder.Services.AddOutputCache(options =>
        {
            options.DefaultExpirationTimeSpan = TimeSpan.Zero;
            options.MaximumBodySize = 0;
            options.SizeLimit = 0;
        });
        Log.Information("Disabled OutputCache in development environment for testing");
    }
    else if (builder.Services.Any(s => s.ServiceType == typeof(IConnectionMultiplexer)))
    {
        builder.Services.AddStackExchangeRedisOutputCache(options =>
        {
            options.Configuration = builder.Configuration.GetConnectionString("Redis") ?? 
                                Environment.GetEnvironmentVariable("ConnectionStrings__Redis") ?? 
                                "redis-master.web.svc.cluster.local:6379,abortConnect=false";
            options.InstanceName = "WorkoutTracker:OutputCache:";
        });
        Log.Information("Configured OutputCache with Redis backend");
    }
    else 
    {
        builder.Services.AddOutputCache();
        Log.Information("Configured OutputCache with memory backend");
    }

    builder.Services.AddOutputCache(options =>
    {
        options.AddPolicy("StaticContent", builder => 
            builder.Cache()
                   .Expire(TimeSpan.FromHours(12))
                   .Tag("static-content"));
                   
        options.AddPolicy("StaticContentWithId", builder => 
            builder.Cache()
                   .Expire(TimeSpan.FromHours(12))
                   .SetVaryByRouteValue("id")
                   .Tag("static-content-with-id"));
                   
        options.AddPolicy("HelpContent", builder => 
            builder.Cache()
                   .Expire(TimeSpan.FromDays(1))
                   .SetVaryByRouteValue("id")
                   .SetVaryByRouteValue("category")
                   .Tag("help-content"));
                   
        options.AddPolicy("GlossaryContent", builder => 
            builder.Cache()
                   .Expire(TimeSpan.FromDays(1))
                   .Tag("glossary-content"));
                   
        options.AddPolicy("ExerciseLibrary", builder => 
            builder.Cache()
                   .Expire(TimeSpan.FromHours(6))
                   .SetVaryByQuery("category", "search")
                   .Tag("exercise-library"));
        
        options.AddPolicy("SharedWorkoutReports", builder => 
            builder.Cache()
                   .Expire(TimeSpan.FromHours(6))
                   .SetVaryByQuery("token", "period")
                   .Tag("shared-workout-reports"));
        
        options.AddPolicy("SharedWorkout", builder => 
            builder.Cache()
                   .Expire(TimeSpan.FromHours(3))
                   .SetVaryByQuery("token")
                   .Tag("shared-workout"));
                   
        options.AddPolicy("HomePagePolicy", builder =>
            builder.Cache()
                   .Expire(TimeSpan.FromHours(1))
                   .Tag("home-page"));
                   
        options.AddPolicy("LoginPagePolicy", builder =>
            builder.Cache()
                   .Expire(TimeSpan.FromMinutes(15))
                   .Tag("login-page")
                   .SetVaryByQuery("ReturnUrl"));
    });

    builder.Services.AddOptions<SessionOptions>()
        .Configure<IDistributedCache>((options, cache) => 
        {
            options.IOTimeout = TimeSpan.FromSeconds(5);
        });

    builder.Services.AddSingleton<ISessionStore, WorkoutTrackerWeb.Services.Session.DistributedSessionStore>();
    builder.Services.AddSingleton<ISessionSerializer, JsonSessionSerializer>();

    builder.Services.Configure<JsonSessionSerializerOptions>(options => 
    {
        options.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;
        options.WriteIndented = false;
        options.DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull;
    });

    builder.Services.AddTempDataTypeConverter();

    builder.Services.AddCors(options =>
    {
        options.AddPolicy("ProductionDomainPolicy", policy =>
        {
            policy.WithOrigins(
                    "https://wot.ninjatec.co.uk", 
                    "https://workouttracker.online", 
                    "https://www.workouttracker.online")
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        });
    });

    builder.Services.AddAntiforgery(options => 
    {
        options.HeaderName = "X-CSRF-TOKEN";
        options.Cookie.Name = "CSRF-TOKEN";
        options.Cookie.HttpOnly = false;
        
        if (builder.Environment.IsProduction())
        {
            options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
        }
        else if (builder.Environment.IsDevelopment())
        {
            options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;
        }
        else
        {
            options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
        }
        
        options.Cookie.SameSite = SameSiteMode.Strict;
    });

    var healthChecksBuilder = builder.Services.AddHealthChecks()
        .AddDbContextCheck<ApplicationDbContext>("database_health_check", 
            tags: new[] { "ready", "db" },
            customTestQuery: async (db, ct) => await db.Database.CanConnectAsync(ct))
        .AddDbContextCheck<DataProtectionKeysDbContext>("data_protection_health_check", 
            tags: new[] { "ready", "db" })
        .AddSqlServer(
            connectionString,
            healthQuery: "SELECT 1;",
            name: "sql_health_check",
            failureStatus: HealthStatus.Degraded,
            tags: new[] { "ready", "db", "sql" })
        .AddDiskStorageHealthCheck(
            setup => setup.AddDrive("/", 512),
            name: "disk_storage",
            failureStatus: HealthStatus.Degraded,
            tags: new[] { "ready", "system" })
        .AddPrivateMemoryHealthCheck(
            1024 * 1024 * 1024,
            name: "private_memory_check",
            tags: new[] { "ready", "system" })
        .AddCheck("self", () => HealthCheckResult.Healthy(), tags: new[] { "live" })
        .AddCheck<WorkoutTrackerWeb.HealthChecks.DatabaseConnectionPoolHealthCheck>(
            "database_connection_pool", 
            failureStatus: Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Degraded,
            tags: new[] { "ready", "db", "connection-pool" })
        .AddCheck<WorkoutTrackerWeb.HealthChecks.SmtpHealthCheck>(
            "email_smtp_health", 
            failureStatus: Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Degraded,
            tags: new[] { "ready", "email", "smtp" });

    if (!builder.Environment.IsDevelopment())
    {
        var redisHealthConnectionString = builder.Configuration.GetConnectionString("Redis") ?? 
                                    Environment.GetEnvironmentVariable("ConnectionStrings__Redis") ?? 
                                    "redis-master.web.svc.cluster.local:6379,abortConnect=false";
        
        builder.Services.Configure<RedisOptions>(options => 
        {
            options.ConnectionString = redisHealthConnectionString;
        });
        
        healthChecksBuilder.AddCheck<RedisMetricsHealthCheck>(
            "redis_metrics_health_check",
            failureStatus: HealthStatus.Degraded,
            tags: new[] { "ready", "cache", "redis" });
    }

    builder.Services.AddDbContext<WorkoutTrackerWebContext>(options =>
    {
        var connectionString = builder.Configuration.GetConnectionString("WorkoutTrackerWebContext") ?? 
                               throw new InvalidOperationException("Connection string 'WorkoutTrackerWebContext' not found.");
        
        var poolingConfig = builder.Configuration.GetSection("DatabaseConnectionPooling");
        int maxPoolSize = poolingConfig.GetValue<int>("MaxPoolSize", 200);
        int minPoolSize = poolingConfig.GetValue<int>("MinPoolSize", 10);
        int connectionLifetime = poolingConfig.GetValue<int>("ConnectionLifetime", 300);
        bool connectionResetEnabled = poolingConfig.GetValue<bool>("ConnectionResetEnabled", true);
        int loadBalanceTimeout = poolingConfig.GetValue<int>("LoadBalanceTimeout", 30);
        int retryCount = poolingConfig.GetValue<int>("RetryCount", 5);
        int retryInterval = poolingConfig.GetValue<int>("RetryInterval", 10);
        
        var sqlConnectionBuilder = new SqlConnectionStringBuilder(connectionString)
        {
            MaxPoolSize = maxPoolSize,
            MinPoolSize = minPoolSize,
            ConnectTimeout = loadBalanceTimeout,
            LoadBalanceTimeout = loadBalanceTimeout,
            ConnectRetryCount = retryCount,
            ConnectRetryInterval = retryInterval
        };

        string enhancedConnectionString = sqlConnectionBuilder.ConnectionString;
        if (connectionLifetime > 0)
        {
            enhancedConnectionString += $";Connection Lifetime={connectionLifetime}";
        }
        
        if (connectionResetEnabled && OperatingSystem.IsWindows())
        {
            enhancedConnectionString += $";Connection Reset=true";
        }
        
        options.UseSqlServer(enhancedConnectionString, sqlOptions => 
        {
            sqlOptions.EnableRetryOnFailure(
                maxRetryCount: retryCount,
                maxRetryDelay: TimeSpan.FromSeconds(retryInterval),
                errorNumbersToAdd: new[] { 4060, 40197, 40501, 40613, 49918, 4221, 1205, 233, 64, -2 });
                
            sqlOptions.CommandTimeout(30);
            sqlOptions.MigrationsHistoryTable("__EFMigrationsHistory", "dbo");
            
            sqlOptions.MinBatchSize(5);
            sqlOptions.MaxBatchSize(100);
        })
        .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking)
        .EnableSensitiveDataLogging(builder.Environment.IsDevelopment());
    });

    builder.Services.AddSingleton<IDbContextFactory<WorkoutTrackerWebContext>>(serviceProvider =>
    {
        var connectionString = builder.Configuration.GetConnectionString("WorkoutTrackerWebContext") ?? 
                               throw new InvalidOperationException("Connection string 'WorkoutTrackerWebContext' not found.");
        
        var poolingConfig = builder.Configuration.GetSection("DatabaseConnectionPooling");
        int maxPoolSize = poolingConfig.GetValue<int>("MaxPoolSize", 200);
        int minPoolSize = poolingConfig.GetValue<int>("MinPoolSize", 10);
        int connectionLifetime = poolingConfig.GetValue<int>("ConnectionLifetime", 300);
        bool connectionResetEnabled = poolingConfig.GetValue<bool>("ConnectionResetEnabled", true);
        int loadBalanceTimeout = poolingConfig.GetValue<int>("LoadBalanceTimeout", 30);
        int retryCount = poolingConfig.GetValue<int>("RetryCount", 5);
        int retryInterval = poolingConfig.GetValue<int>("RetryInterval", 10);
        
        var sqlConnectionBuilder = new SqlConnectionStringBuilder(connectionString)
        {
            MaxPoolSize = maxPoolSize,
            MinPoolSize = minPoolSize,
            ConnectTimeout = loadBalanceTimeout,
            LoadBalanceTimeout = loadBalanceTimeout,
            ConnectRetryCount = retryCount,
            ConnectRetryInterval = retryInterval
        };

        string enhancedConnectionString = sqlConnectionBuilder.ConnectionString;
        if (connectionLifetime > 0)
        {
            enhancedConnectionString += $";Connection Lifetime={connectionLifetime}";
        }
        
        if (connectionResetEnabled && OperatingSystem.IsWindows())
        {
            enhancedConnectionString += $";Connection Reset=true";
        }
        
        var optionsBuilder = new DbContextOptionsBuilder<WorkoutTrackerWebContext>();
        optionsBuilder.UseSqlServer(enhancedConnectionString, sqlOptions => 
        {
            sqlOptions.EnableRetryOnFailure(
                maxRetryCount: retryCount,
                maxRetryDelay: TimeSpan.FromSeconds(retryInterval),
                errorNumbersToAdd: new[] { 4060, 40197, 40501, 40613, 49918, 4221, 1205, 233, 64, -2 });
                
            sqlOptions.CommandTimeout(30);
            sqlOptions.MigrationsHistoryTable("__EFMigrationsHistory", "dbo");
            
            sqlOptions.MinBatchSize(5);
            sqlOptions.MaxBatchSize(100);
        })
        .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking) 
        .EnableSensitiveDataLogging(builder.Environment.IsDevelopment());
        
        return new DbContextFactory<WorkoutTrackerWebContext>(optionsBuilder.Options);
    });

    builder.Services.ConfigureApplicationCookie(options =>
    {
        options.Cookie.Name = "WorkoutTracker.Auth";
        options.Cookie.HttpOnly = true;
        options.Cookie.SameSite = SameSiteMode.Strict;
        
        if (builder.Environment.IsDevelopment())
        {
            options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;
        }
        else
        {
            options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
        }
        
        options.ExpireTimeSpan = TimeSpan.FromDays(14);
        options.SlidingExpiration = true;
        
        if (!builder.Environment.IsDevelopment())
        {
            options.Cookie.Domain = ".workouttracker.online";
        }
        
        options.Events.OnSignedIn = async context =>
        {
            var userManager = context.HttpContext.RequestServices
                .GetRequiredService<UserManager<WorkoutTrackerWeb.Models.Identity.AppUser>>();
            var loginHistoryService = context.HttpContext.RequestServices
                .GetRequiredService<LoginHistoryService>();
            
            var user = await userManager.GetUserAsync(context.Principal);
            if (user != null)
            {
                await loginHistoryService.RecordSuccessfulLoginAsync(user.Id);
            }
        };
    });

    var app = builder.Build();

    try
    {
        using (var scope = app.Services.CreateScope())
        {
            var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Running early Hangfire schema initialization");
            
            var hangfireInitService = scope.ServiceProvider.GetRequiredService<IHangfireInitializationService>();
            var success = hangfireInitService.InitializeHangfireSchema();
            
            if (success)
            {
                logger.LogInformation("Early Hangfire schema initialization successful");
            }
            else
            {
                logger.LogWarning("Early Hangfire schema initialization failed - dashboard may not be accessible");
            }
        }
    }
    catch (Exception ex)
    {
        using (var scope = app.Services.CreateScope())
        {
            var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
            logger.LogError(ex, "Error during early Hangfire schema initialization");
        }
    }

    if (app.Environment.IsDevelopment())
    {
        app.UseMigrationsEndPoint();
    }
    else
    {
        app.UseExceptionHandler("/Errors/Error");
        app.UseStatusCodePagesWithReExecute("/Errors/Error", "?statusCode={0}");
        app.UseHsts();
    }

    app.UseForwardedHeaders();

    app.UseInvitationRedirect();

    app.Use(async (context, next) =>
    {
        context.Response.Headers["Content-Security-Policy"] = 
            "default-src 'self'; " +
            "script-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://cdn.datatables.net 'unsafe-inline'; " + 
            "style-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://cdn.datatables.net https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css 'unsafe-inline'; " + 
            "img-src 'self' data: https://cdn.jsdelivr.net; " + 
            "font-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; " +
            "connect-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://cdn.datatables.net https://wot.ninjatec.co.uk https://workouttracker.online https://www.workouttracker.online " +
                             "wss://wot.ninjatec.co.uk wss://workouttracker.online wss://www.workouttracker.online " +
                             "ws://wot.ninjatec.co.uk ws://workouttracker.online ws://www.workouttracker.online wss://* ws://*; " +
            "frame-src 'self'; " +
            "frame-ancestors 'self' https://wot.ninjatec.co.uk https://workouttracker.online https://www.workouttracker.online; " + 
            "form-action 'self' https://wot.ninjatec.co.uk https://workouttracker.online https://www.workouttracker.online; " +
            "base-uri 'self'; " +
            "object-src 'none'";
        
        context.Response.Headers["Permissions-Policy"] = 
            "camera=(), microphone=(), geolocation=()";
        
        context.Response.Headers["X-Content-Type-Options"] = "nosniff";
        
        context.Response.Headers["X-Frame-Options"] = "SAMEORIGIN";
        
        context.Response.Headers["Referrer-Policy"] = "strict-origin-when-cross-origin";
        
        await next();
    });

    app.UseRedisResilience();

    app.UseDbConnectionResilience();

    Log.Information("Attempting to initialize Hangfire schema");
    try
    {
        using (var scope = app.Services.CreateScope())
        {
            var hangfireInitializationService = scope.ServiceProvider.GetRequiredService<IHangfireInitializationService>();
            bool success = hangfireInitializationService.InitializeHangfireSchema();
            if (success)
            {
                Log.Information("Hangfire schema initialized successfully");
            }
            else 
            {
                Log.Warning("Hangfire schema initialization returned false - tables may not have been created");
            }
            
            bool schemaExists = hangfireInitializationService.VerifyHangfireSchema();
            Log.Information("Hangfire schema verification: {Result}", schemaExists ? "Success" : "Failed");
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Error initializing Hangfire schema");
    }

    try {
        using (var scope = app.Services.CreateScope())
        {
            var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Registering alerting jobs through service-based API");
            
            var alertingJobsRegistration = scope.ServiceProvider.GetRequiredService<WorkoutTrackerWeb.Services.Hangfire.AlertingJobsRegistration>();
            alertingJobsRegistration.RegisterAlertingJobs();
            
            logger.LogInformation("Alerting jobs registered successfully");
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Error registering alerting jobs");
    }

    try {
        using (var scope = app.Services.CreateScope())
        {
            var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Registering workout scheduling jobs");
            
            var workoutSchedulingJobsRegistration = scope.ServiceProvider.GetRequiredService<WorkoutTrackerWeb.Services.Hangfire.WorkoutSchedulingJobsRegistration>();
            workoutSchedulingJobsRegistration.RegisterWorkoutSchedulingJobs();
            
            logger.LogInformation("Workout scheduling jobs registered successfully");
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Error registering workout scheduling jobs");
    }

    try {
        using (var scope = app.Services.CreateScope())
        {
            var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Registering workout reminder jobs");
            
            var workoutReminderJobsRegistration = scope.ServiceProvider.GetRequiredService<WorkoutTrackerWeb.Services.Hangfire.WorkoutReminderJobsRegistration>();
            workoutReminderJobsRegistration.RegisterWorkoutReminderJobs();
            
            logger.LogInformation("Workout reminder jobs registered successfully");
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Error registering workout reminder jobs");
    }

    app.UseHttpMetrics();

    app.UseHttpsRedirection();

    app.UseStaticFiles(new StaticFileOptions
    {
        ContentTypeProvider = new FileExtensionContentTypeProvider
        {
            Mappings = 
            {
                [".js"] = "application/javascript",
                [".min.js"] = "application/javascript"
            }
        }
    });

    app.UseIpRateLimiting();
    
    app.UseRateLimitBypass();

    app.UseCors("ProductionDomainPolicy");

    app.UseRouting();

    app.UseOutputCache();

    app.UseSession();

    app.UseVersionLogging();

    app.UseRequestLogging(app.Environment.IsProduction());

    app.UseAuthentication();
    app.UseAuthorization();

    app.MapHealthChecks("/health", new HealthCheckOptions
    {
        Predicate = _ => true,
        ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
    }).AllowAnonymous()
      .WithMetadata(new EndpointNameMetadata("Health_Root"));

    app.MapHealthChecks("/health/live", new HealthCheckOptions
    {
        Predicate = check => check.Tags.Contains("live"),
        ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
    }).AllowAnonymous()
      .WithMetadata(new EndpointNameMetadata("Health_Live"));

    app.MapGet("/health/ready", async context =>
    {
        context.Response.StatusCode = StatusCodes.Status200OK;
        await context.Response.WriteAsync("OK");
    }).AllowAnonymous();

    app.MapHealthChecks("/health/database", new HealthCheckOptions
    {
        Predicate = check => check.Tags.Contains("db"),
        ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
    }).AllowAnonymous();

    app.MapHealthChecks("/health/redis", new HealthCheckOptions
    {
        Predicate = check => check.Tags.Contains("redis"),
        ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
    }).AllowAnonymous();

    app.MapHealthChecks("/health/email", new HealthCheckOptions
    {
        Predicate = check => check.Tags.Contains("email"),
        ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
    }).AllowAnonymous();

    app.UseHangfireDashboard("/hangfire", new DashboardOptions {
        Authorization = new[] { new HangfireAuthorizationFilter() }
    });

    app.MapControllerRoute(
        name: "areas",
        pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");

    app.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}");

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapGet("Shared/{action=Index}/{id?}", context =>
        {
            var action = context.Request.RouteValues["action"]?.ToString() ?? "Index";
            var id = context.Request.RouteValues["id"]?.ToString();
            var token = context.Request.Query["token"].ToString();

            string redirectUrl;
            switch (action.ToLower())
            {
                case "index":
                    redirectUrl = "/Shared/Index";
                    break;
                case "session":
                    redirectUrl = $"/Shared/Session/{id}";
                    break;
                case "reports":
                    redirectUrl = "/Shared/Reports";
                    break;
                case "calculator":
                    redirectUrl = "/Shared/Calculator";
                    break;
                default:
                    redirectUrl = "/Shared/Index";
                    break;
            }

            if (!string.IsNullOrEmpty(token))
            {
                redirectUrl += (redirectUrl.Contains('?') ? "&" : "?") + $"token={token}";
            }

            context.Response.Redirect(redirectUrl);
            return Task.CompletedTask;
        });
    });

    app.MapMetrics();

    app.MapHub<ImportProgressHub>("/importProgressHub");

    app.MapRazorPages();

    using (var scope = app.Services.CreateScope())
    {
        var services = scope.ServiceProvider;
        try
        {
            WorkoutTrackerWeb.Data.SeedData.InitializeAsync(services).Wait();
            Log.Information("Seed data initialization completed successfully");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "An error occurred while seeding the database");
        }
    }

    app.Run();
}
catch (Exception ex)
{
    Log.Fatal(ex, "Application startup failed");
}
finally
{
    Log.CloseAndFlush();
}

static ConfigurationOptions ConfigureRedisOptions(string connectionString)
{
    var options = ConfigurationOptions.Parse(connectionString);
    
    options.KeepAlive = 180;
    options.ConnectTimeout = 10000;
    options.SyncTimeout = 10000;
    options.AbortOnConnectFail = false;
    options.ReconnectRetryPolicy = new ExponentialRetry(5000);
    options.ConnectRetry = 5;
    
    options.AllowAdmin = true;
    options.TieBreaker = "";
    
    options.ConfigCheckSeconds = 5;
    options.ConfigurationChannel = "";
    
    options.ClientName = "WorkoutTrackerCache";
    
    return options;
}

public static class WorkoutTrackerMetrics
{
    public static readonly Counter SessionsCreated = Metrics.CreateCounter(
        "workout_tracker_sessions_created_total", "Number of workout sessions created");
    
    public static readonly Counter SetsCreated = Metrics.CreateCounter(
        "workout_tracker_sets_created_total", "Number of exercise sets created");
        
    public static readonly Counter RepsCreated = Metrics.CreateCounter(
        "workout_tracker_reps_created_total", "Number of exercise reps created");

    public static readonly Gauge ActiveUsers = Metrics.CreateGauge(
        "workout_tracker_active_users", "Number of currently active users");
        
    public static readonly Histogram HttpRequestDuration = Metrics.CreateHistogram(
        "workout_tracker_http_request_duration_seconds", 
        "Duration of HTTP requests in seconds",
        new HistogramConfiguration
        {
            Buckets = Histogram.ExponentialBuckets(0.01, 2, 10)
        });
}

public class HangfireAuthorizationFilter : IDashboardAuthorizationFilter
{
    public bool Authorize(DashboardContext context)
    {
        var httpContext = context.GetHttpContext();
        
        if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development" &&
           (httpContext.Request.Host.Host.Equals("localhost", StringComparison.OrdinalIgnoreCase) || 
            httpContext.Request.Host.Host.Equals("127.0.0.1", StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }
        
        return httpContext.User.Identity?.IsAuthenticated == true && 
               httpContext.User.IsInRole("Admin");
    }
}
