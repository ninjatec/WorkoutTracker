// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkoutTrackerWeb.Data;

#nullable disable

namespace WorkoutTrackerWeb.Migrations
{
    [DbContext(typeof(WorkoutTrackerWebContext))]
    [Migration("20250505082808_AddDecimalPrecisionToModels")]
    partial class AddDecimalPrecisionToModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlossaryTermGlossaryTerm", b =>
                {
                    b.Property<int>("GlossaryTermId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedTermsId")
                        .HasColumnType("int");

                    b.HasKey("GlossaryTermId", "RelatedTermsId");

                    b.HasIndex("RelatedTermsId");

                    b.ToTable("GlossaryTermRelatedTerms", (string)null);
                });

            modelBuilder.Entity("HelpArticleHelpArticle", b =>
                {
                    b.Property<int>("HelpArticleId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedArticlesId")
                        .HasColumnType("int");

                    b.HasKey("HelpArticleId", "RelatedArticlesId");

                    b.HasIndex("RelatedArticlesId");

                    b.ToTable("HelpArticleRelatedArticles", (string)null);
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Alerting.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcknowledgedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AcknowledgementNote")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AlertThresholdId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentValue")
                        .HasColumnType("float");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailSentAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EscalatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEscalated")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotificationSentAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlertThresholdId");

                    b.HasIndex("TriggeredAt");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Alerting.AlertHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcknowledgedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AcknowledgementNote")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("ActualValue")
                        .HasColumnType("float");

                    b.Property<int>("AlertId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("MetricCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<double>("ThresholdValue")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("TimeToAcknowledge")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeToResolve")
                        .HasColumnType("time");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasAcknowledged")
                        .HasColumnType("bit");

                    b.Property<bool>("WasEscalated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TriggeredAt");

                    b.ToTable("AlertHistory");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Alerting.AlertThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("CriticalThreshold")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("EscalationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MetricCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("NotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("WarningThreshold")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MetricName");

                    b.ToTable("AlertThreshold");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Alerting.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlertId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AlertId");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsViewedByCoach")
                        .HasColumnType("bit");

                    b.Property<string>("RelatedEntityId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ViewedByCoachDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityDate");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.HasIndex("IsViewedByCoach");

                    b.ToTable("ClientActivities");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientEquipment", b =>
                {
                    b.Property<int>("ClientEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientEquipmentId"));

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientEquipmentId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("IsAvailable");

                    b.ToTable("ClientEquipments");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientExerciseExclusion", b =>
                {
                    b.Property<int>("ClientExerciseExclusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientExerciseExclusionId"));

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByCoachId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientExerciseExclusionId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("CreatedByCoachId");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("IsActive");

                    b.ToTable("ClientExerciseExclusions");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int?>("CoachClientRelationshipId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletionCriteria")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CurrentValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CustomCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoachCreated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisibleToCoach")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastProgressUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MeasurementUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("StartValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TargetValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TrackingFrequency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachClientRelationshipId");

                    b.HasIndex("IsActive");

                    b.ToTable("ClientGoals");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("ClientGroups");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientGroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CoachClientRelationshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("CoachClientRelationshipId");

                    b.ToTable("ClientGroupMembers");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachClientMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoachClientRelationshipId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFromCoach")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachClientRelationshipId");

                    b.ToTable("CoachClientMessages");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachClientPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAssignTemplates")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreateGoals")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreateTemplates")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreateWorkouts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteWorkouts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditWorkouts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("CanModifyWorkouts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewPersonalInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewReports")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewWorkouts")
                        .HasColumnType("bit");

                    b.Property<int>("CoachClientRelationshipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachClientRelationshipId")
                        .IsUnique();

                    b.ToTable("CoachClientPermissions");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ClientGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvitationExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("AppUserId1");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.HasIndex("Status");

                    b.HasIndex("CoachId", "ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("CoachClientRelationships");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CoachClientRelationshipId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVisibleToClient")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachClientRelationshipId");

                    b.HasIndex("IsVisibleToClient");

                    b.ToTable("CoachNotes");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ExerciseFeedback", b =>
                {
                    b.Property<int>("ExerciseFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseFeedbackId"));

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("RPE")
                        .HasColumnType("int");

                    b.Property<bool>("TooHeavy")
                        .HasColumnType("bit");

                    b.Property<bool>("TooLight")
                        .HasColumnType("bit");

                    b.Property<int>("WorkoutFeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutSetId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseFeedbackId");

                    b.HasIndex("WorkoutFeedbackId");

                    b.HasIndex("WorkoutSetId");

                    b.ToTable("ExerciseFeedbacks");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ExerciseSubstitution", b =>
                {
                    b.Property<int>("ExerciseSubstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseSubstitutionId"));

                    b.Property<int>("CreatedByCoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentRequired")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EquivalencePercentage")
                        .HasColumnType("int");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("MovementPattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MusclesTargeted")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PrimaryExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SubstituteExerciseTypeId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseSubstitutionId");

                    b.HasIndex("CreatedByCoachId");

                    b.HasIndex("IsGlobal");

                    b.HasIndex("MovementPattern");

                    b.HasIndex("PrimaryExerciseTypeId");

                    b.HasIndex("SubstituteExerciseTypeId");

                    b.ToTable("ExerciseSubstitutions");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.GoalFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("GoalId");

                    b.HasIndex("IsRead");

                    b.ToTable("GoalFeedback");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.GoalMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAutomaticUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("GoalId");

                    b.ToTable("GoalMilestones");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ProgressionHistory", b =>
                {
                    b.Property<int>("ProgressionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressionHistoryId"));

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AppliedAutomatically")
                        .HasColumnType("bit");

                    b.Property<bool>("CoachOverride")
                        .HasColumnType("bit");

                    b.Property<decimal>("NewValue")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PreviousValue")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ProgressionRuleId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("WorkoutSessionId")
                        .HasColumnType("int");

                    b.HasKey("ProgressionHistoryId");

                    b.HasIndex("ApplicationDate");

                    b.HasIndex("ProgressionRuleId");

                    b.HasIndex("WorkoutSessionId");

                    b.ToTable("ProgressionHistories");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ProgressionRule", b =>
                {
                    b.Property<int>("ProgressionRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressionRuleId"));

                    b.Property<bool>("ApplyDeload")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<int>("CoachUserId")
                        .HasColumnType("int");

                    b.Property<int>("ConsecutiveFailuresForDeload")
                        .HasColumnType("int");

                    b.Property<int>("ConsecutiveSuccessesRequired")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeloadPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("IncrementValue")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaximumValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SuccessThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("WorkoutTemplateExerciseId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutTemplateSetId")
                        .HasColumnType("int");

                    b.HasKey("ProgressionRuleId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("CoachUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("WorkoutTemplateExerciseId");

                    b.HasIndex("WorkoutTemplateSetId");

                    b.ToTable("ProgressionRules");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.TemplateAssignment", b =>
                {
                    b.Property<int>("TemplateAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateAssignmentId"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ClientNotified")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientRelationshipId")
                        .HasColumnType("int");

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<string>("CoachNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CoachUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkoutTemplateId")
                        .HasColumnType("int");

                    b.HasKey("TemplateAssignmentId");

                    b.HasIndex("ClientRelationshipId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("CoachUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("TemplateAssignments");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.WorkoutFeedback", b =>
                {
                    b.Property<int>("WorkoutFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutFeedbackId"));

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<bool>("CoachNotified")
                        .HasColumnType("bit");

                    b.Property<bool>("CoachViewed")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("CompletedAllExercises")
                        .HasColumnType("bit");

                    b.Property<int>("DifficultyRating")
                        .HasColumnType("int");

                    b.Property<int>("EnergyLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncompleteReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OverallRating")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutSessionId1")
                        .HasColumnType("int");

                    b.HasKey("WorkoutFeedbackId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("CoachNotified");

                    b.HasIndex("CoachViewed");

                    b.HasIndex("WorkoutSessionId")
                        .IsUnique();

                    b.HasIndex("WorkoutSessionId1")
                        .IsUnique()
                        .HasFilter("[WorkoutSessionId1] IS NOT NULL");

                    b.ToTable("WorkoutFeedbacks");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.WorkoutSchedule", b =>
                {
                    b.Property<int>("WorkoutScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutScheduleId"));

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<int>("CoachUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<int?>("LastGeneratedSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastGeneratedWorkoutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastGenerationStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastReminderSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("MultipleDaysOfWeek")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RecurrenceDayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("RecurrenceDayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReminderHoursBefore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SendReminder")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TemplateAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateAssignmentId1")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TotalWorkoutsGenerated")
                        .HasColumnType("int");

                    b.HasKey("WorkoutScheduleId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("CoachUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastGeneratedSessionId");

                    b.HasIndex("TemplateAssignmentId");

                    b.HasIndex("TemplateAssignmentId1");

                    b.HasIndex("TemplateId");

                    b.ToTable("WorkoutSchedules");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.ExerciseType", b =>
                {
                    b.Property<int>("ExerciseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseTypeId"));

                    b.Property<decimal?>("CaloriesPerMinute")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Equipment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsFromApi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Muscle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryMuscleGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryMuscles")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryMuscles")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExerciseTypeId");

                    b.ToTable("ExerciseType");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AssignedToAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstimatedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("PublicResponse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.GlossaryTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GlossaryTerm");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.HelpArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasVideo")
                        .HasColumnType("bit");

                    b.Property<int>("HelpCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrintable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HelpCategoryId");

                    b.ToTable("HelpArticle");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.HelpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IconClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("HelpCategory");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.LoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Platform")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.PendingExerciseSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SelectedApiExerciseIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PendingExerciseSelection");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Rep", b =>
                {
                    b.Property<int>("RepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepId"));

                    b.Property<int>("RepNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WorkoutSetId")
                        .HasColumnType("int");

                    b.HasKey("RepId");

                    b.HasIndex("WorkoutSetId");

                    b.ToTable("Rep");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Settype", b =>
                {
                    b.Property<int>("SettypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SettypeId");

                    b.ToTable("Settype");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.ShareToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<bool>("AllowCalculatorAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowReportAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSessionAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxAccessCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutSessionId");

                    b.ToTable("ShareToken");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("IdentityUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutExercise", b =>
                {
                    b.Property<int>("WorkoutExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutExerciseId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseTypeId1")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int?>("RestPeriodSeconds")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkoutSessionId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutExerciseId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("ExerciseTypeId1");

                    b.HasIndex("WorkoutSessionId");

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutSession", b =>
                {
                    b.Property<int>("WorkoutSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutSessionId"));

                    b.Property<decimal?>("CaloriesBurned")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFromCoach")
                        .HasColumnType("bit");

                    b.Property<int>("IterationNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NextIterationId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousIterationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TemplateAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("TemplatesUsed")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutTemplateId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutSessionId");

                    b.HasIndex("NextIterationId");

                    b.HasIndex("PreviousIterationId");

                    b.HasIndex("StartDateTime");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutSet", b =>
                {
                    b.Property<int>("WorkoutSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutSetId"));

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedOneRM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Intensity")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWarmup")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("RPE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<int?>("RestSeconds")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("RestTime")
                        .HasColumnType("time");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<int>("SetNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SettypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TargetMaxReps")
                        .HasColumnType("int");

                    b.Property<int?>("TargetMinReps")
                        .HasColumnType("int");

                    b.Property<int?>("TargetReps")
                        .HasColumnType("int");

                    b.Property<decimal?>("TargetWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WorkoutExerciseId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutSetId");

                    b.HasIndex("SettypeId");

                    b.HasIndex("WorkoutExerciseId");

                    b.ToTable("WorkoutSets");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplate", b =>
                {
                    b.Property<int>("WorkoutTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutTemplateId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutTemplateId");

                    b.HasIndex("Category");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutTemplate");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplateExercise", b =>
                {
                    b.Property<int>("WorkoutTemplateExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutTemplateExerciseId"));

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxReps")
                        .HasColumnType("int");

                    b.Property<int>("MinReps")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("RestSeconds")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutTemplateId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutTemplateExerciseId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("SequenceNum");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("WorkoutTemplateExercise");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplateSet", b =>
                {
                    b.Property<int>("WorkoutTemplateSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutTemplateSetId"));

                    b.Property<int>("DefaultReps")
                        .HasColumnType("int");

                    b.Property<decimal>("DefaultWeight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<int>("SettypeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutTemplateExerciseId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutTemplateSetId");

                    b.HasIndex("SequenceNum");

                    b.HasIndex("SettypeId");

                    b.HasIndex("WorkoutTemplateExerciseId");

                    b.ToTable("WorkoutTemplateSet");
                });

            modelBuilder.Entity("GlossaryTermGlossaryTerm", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.GlossaryTerm", null)
                        .WithMany()
                        .HasForeignKey("GlossaryTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.GlossaryTerm", null)
                        .WithMany()
                        .HasForeignKey("RelatedTermsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelpArticleHelpArticle", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.HelpArticle", null)
                        .WithMany()
                        .HasForeignKey("HelpArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.HelpArticle", null)
                        .WithMany()
                        .HasForeignKey("RelatedArticlesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Alerting.Alert", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Alerting.AlertThreshold", "AlertThreshold")
                        .WithMany()
                        .HasForeignKey("AlertThresholdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlertThreshold");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Alerting.Notification", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Alerting.Alert", "Alert")
                        .WithMany()
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Alert");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientActivity", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientEquipment", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientExerciseExclusion", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.User", "CreatedByCoach")
                        .WithMany()
                        .HasForeignKey("CreatedByCoachId");

                    b.HasOne("WorkoutTrackerWeb.Models.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CreatedByCoach");

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientGoal", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("CoachClientRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientGroup", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientGroupMember", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.ClientGroup", "ClientGroup")
                        .WithMany()
                        .HasForeignKey("ClientGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("CoachClientRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientGroup");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachClientMessage", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("CoachClientRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachClientPermission", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", "Relationship")
                        .WithOne("Permissions")
                        .HasForeignKey("WorkoutTrackerWeb.Models.Coaching.CoachClientPermission", "CoachClientRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", null)
                        .WithMany("CoachRelationships")
                        .HasForeignKey("AppUserId");

                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", null)
                        .WithMany("ClientRelationships")
                        .HasForeignKey("AppUserId1");

                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.ClientGroup", "ClientGroup")
                        .WithMany("ClientRelationships")
                        .HasForeignKey("ClientGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientGroup");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachNote", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", "Relationship")
                        .WithMany("Notes")
                        .HasForeignKey("CoachClientRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ExerciseFeedback", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.WorkoutFeedback", "WorkoutFeedback")
                        .WithMany("ExerciseFeedbacks")
                        .HasForeignKey("WorkoutFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSet", "WorkoutSet")
                        .WithMany()
                        .HasForeignKey("WorkoutSetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkoutFeedback");

                    b.Navigation("WorkoutSet");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ExerciseSubstitution", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "CreatedByCoach")
                        .WithMany()
                        .HasForeignKey("CreatedByCoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.ExerciseType", "PrimaryExercise")
                        .WithMany()
                        .HasForeignKey("PrimaryExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.ExerciseType", "SubstituteExercise")
                        .WithMany()
                        .HasForeignKey("SubstituteExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByCoach");

                    b.Navigation("PrimaryExercise");

                    b.Navigation("SubstituteExercise");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.GoalFeedback", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Identity.AppUser", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.ClientGoal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.GoalMilestone", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.ClientGoal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ProgressionHistory", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.ProgressionRule", "ProgressionRule")
                        .WithMany("ProgressionHistory")
                        .HasForeignKey("ProgressionRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", "WorkoutSession")
                        .WithMany()
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProgressionRule");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ProgressionRule", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientUserId");

                    b.HasOne("WorkoutTrackerWeb.Models.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutTemplateExercise", "WorkoutTemplateExercise")
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateExerciseId");

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutTemplateSet", "WorkoutTemplateSet")
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateSetId");

                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("WorkoutTemplateExercise");

                    b.Navigation("WorkoutTemplateSet");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.TemplateAssignment", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", "CoachClientRelationship")
                        .WithMany()
                        .HasForeignKey("ClientRelationshipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkoutTrackerWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("CoachClientRelationship");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.WorkoutFeedback", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", "WorkoutSession")
                        .WithMany()
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", null)
                        .WithOne("WorkoutFeedback")
                        .HasForeignKey("WorkoutTrackerWeb.Models.Coaching.WorkoutFeedback", "WorkoutSessionId1");

                    b.Navigation("Client");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.WorkoutSchedule", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", "LastGeneratedSession")
                        .WithMany()
                        .HasForeignKey("LastGeneratedSessionId");

                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.TemplateAssignment", "TemplateAssignment")
                        .WithMany()
                        .HasForeignKey("TemplateAssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkoutTrackerWeb.Models.Coaching.TemplateAssignment", null)
                        .WithMany("WorkoutSchedules")
                        .HasForeignKey("TemplateAssignmentId1");

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("LastGeneratedSession");

                    b.Navigation("Template");

                    b.Navigation("TemplateAssignment");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Feedback", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.HelpArticle", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.HelpCategory", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("HelpCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.HelpCategory", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.HelpCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Rep", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSet", "WorkoutSet")
                        .WithMany()
                        .HasForeignKey("WorkoutSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutSet");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.ShareToken", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", "WorkoutSession")
                        .WithMany()
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutExercise", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("WorkoutTrackerWeb.Models.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.ExerciseType", null)
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseTypeId1");

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", "WorkoutSession")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("ExerciseType");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutSession", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", "NextIteration")
                        .WithMany()
                        .HasForeignKey("NextIterationId");

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutSession", "PreviousIteration")
                        .WithMany()
                        .HasForeignKey("PreviousIterationId");

                    b.HasOne("WorkoutTrackerWeb.Models.User", "User")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateId");

                    b.Navigation("NextIteration");

                    b.Navigation("PreviousIteration");

                    b.Navigation("User");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutSet", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Settype", "Settype")
                        .WithMany()
                        .HasForeignKey("SettypeId");

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutExercise", "WorkoutExercise")
                        .WithMany("WorkoutSets")
                        .HasForeignKey("WorkoutExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settype");

                    b.Navigation("WorkoutExercise");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplate", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplateExercise", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("WorkoutTrackerWeb.Models.ExerciseType", "ExerciseType")
                        .WithMany("TemplateExercises")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany("TemplateExercises")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("ExerciseType");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplateSet", b =>
                {
                    b.HasOne("WorkoutTrackerWeb.Models.Settype", "Settype")
                        .WithMany()
                        .HasForeignKey("SettypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTrackerWeb.Models.WorkoutTemplateExercise", "WorkoutTemplateExercise")
                        .WithMany("TemplateSets")
                        .HasForeignKey("WorkoutTemplateExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settype");

                    b.Navigation("WorkoutTemplateExercise");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ClientGroup", b =>
                {
                    b.Navigation("ClientRelationships");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.CoachClientRelationship", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.ProgressionRule", b =>
                {
                    b.Navigation("ProgressionHistory");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.TemplateAssignment", b =>
                {
                    b.Navigation("WorkoutSchedules");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Coaching.WorkoutFeedback", b =>
                {
                    b.Navigation("ExerciseFeedbacks");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.ExerciseType", b =>
                {
                    b.Navigation("TemplateExercises");

                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.HelpCategory", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.Identity.AppUser", b =>
                {
                    b.Navigation("ClientRelationships");

                    b.Navigation("CoachRelationships");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.User", b =>
                {
                    b.Navigation("WorkoutSessions");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutExercise", b =>
                {
                    b.Navigation("WorkoutSets");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutSession", b =>
                {
                    b.Navigation("WorkoutExercises");

                    b.Navigation("WorkoutFeedback");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplate", b =>
                {
                    b.Navigation("TemplateExercises");
                });

            modelBuilder.Entity("WorkoutTrackerWeb.Models.WorkoutTemplateExercise", b =>
                {
                    b.Navigation("TemplateSets");
                });
#pragma warning restore 612, 618
        }
    }
}
