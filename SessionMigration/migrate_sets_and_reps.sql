-- Script to map Session Sets to WorkoutExercises and WorkoutSets\n-- This script transforms the legacy Set/Rep hierarchy to WorkoutExercise/WorkoutSet\n\n-- Step 1: Create WorkoutExercise records for each unique Session-ExerciseType combination\nINSERT INTO WorkoutExercises (\n    WorkoutSessionId, \n    ExerciseTypeId, \n    SequenceNum, \n    OrderIndex\n)\nSELECT DISTINCT\n    ws.WorkoutSessionId,\n    s.ExerciseTypeId,\n    MIN(s.SequenceNum) AS SequenceNum,\n    MIN(s.SequenceNum) AS OrderIndex\nFROM Session sess\nJOIN WorkoutSessions ws ON ws.SessionId = sess.SessionId\nJOIN [Set] s ON s.SessionId = sess.SessionId\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM WorkoutExercises we\n    WHERE we.WorkoutSessionId = ws.WorkoutSessionId\n    AND we.ExerciseTypeId = s.ExerciseTypeId\n)\nGROUP BY ws.WorkoutSessionId, s.ExerciseTypeId;\n\n-- Report on WorkoutExercises creation\nPRINT 'Created ' + CAST(@@ROWCOUNT AS VARCHAR) + ' WorkoutExercise records';\n\n-- Step 2: Create WorkoutSet records for each Set\nINSERT INTO WorkoutSets (\n    WorkoutExerciseId,\n    SettypeId,\n    SequenceNum,\n    SetNumber,\n    Reps,\n    Weight,\n    Notes\n)\nSELECT \n    we.WorkoutExerciseId,\n    s.SettypeId,\n    s.SequenceNum,\n    ROW_NUMBER() OVER (PARTITION BY we.WorkoutExerciseId ORDER BY s.SequenceNum),\n    s.NumberReps,\n    s.Weight,\n    s.Notes\nFROM [Set] s\nJOIN Session sess ON s.SessionId = sess.SessionId\nJOIN WorkoutSessions ws ON ws.SessionId = sess.SessionId\nJOIN WorkoutExercises we ON we.WorkoutSessionId = ws.WorkoutSessionId \n                        AND we.ExerciseTypeId = s.ExerciseTypeId\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM WorkoutSets wss\n    WHERE wss.WorkoutExerciseId = we.WorkoutExerciseId\n    AND wss.SequenceNum = s.SequenceNum\n);\n\n-- Report on WorkoutSets creation\nPRINT 'Created ' + CAST(@@ROWCOUNT AS VARCHAR) + ' WorkoutSet records';\n\n-- Step 3: Verify data mappings\nSELECT \n    'Total Sessions' AS Metric, COUNT(*) AS Count \nFROM Session\nUNION ALL\nSELECT \n    'Total Sets in legacy model' AS Metric, COUNT(*) AS Count \nFROM [Set]\nUNION ALL\nSELECT \n    'Total WorkoutExercises' AS Metric, COUNT(*) AS Count \nFROM WorkoutExercises\nUNION ALL\nSELECT \n    'Total WorkoutSets' AS Metric, COUNT(*) AS Count \nFROM WorkoutSets;\n\n-- Check for any exercises that might have been missed\nSELECT \n    'Sets without corresponding WorkoutSets' AS Issue,\n    s.SetId,\n    s.SessionId,\n    s.ExerciseTypeId,\n    et.Name AS ExerciseName\nFROM [Set] s\nJOIN Session sess ON s.SessionId = sess.SessionId\nJOIN ExerciseType et ON et.ExerciseTypeId = s.ExerciseTypeId\nJOIN WorkoutSessions ws ON ws.SessionId = sess.SessionId\nLEFT JOIN WorkoutExercises we ON we.WorkoutSessionId = ws.WorkoutSessionId \n                            AND we.ExerciseTypeId = s.ExerciseTypeId\nLEFT JOIN WorkoutSets wss ON wss.WorkoutExerciseId = we.WorkoutExerciseId\n                        AND wss.SequenceNum = s.SequenceNum\nWHERE wss.WorkoutSetId IS NULL;
