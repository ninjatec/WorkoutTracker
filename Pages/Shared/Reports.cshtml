@page
@model WorkoutTrackerWeb.Pages.Shared.ReportsModel
@{
    ViewData["Title"] = "Workout Reports";
    Layout = "_SharedLayout";
    int reportPeriod = Model.ReportPeriod;
    int currentPage = Model.CurrentPage;
    int totalPages = Model.TotalPages;
}

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-page="./Index">Shared Workouts</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Reports</li>
                </ol>
            </nav>
            <h1>Workout Reports</h1>
            <p>Track workout progress and performance with detailed reports.</p>
        </div>
    </div>

    <!-- Personal Records (PR) Table -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5>Personal Records (PRs) by Exercise Type</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Exercise</th>
                                    <th>Max Weight (kg)</th>
                                    <th>Record Date</th>
                                    <th>Session</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.PersonalRecords != null && Model.PersonalRecords.Any())
                                {
                                    @foreach (var record in Model.PersonalRecords)
                                    {
                                        <tr>
                                            <td>@record.ExerciseName</td>
                                            <td><strong>@record.MaxWeight</strong></td>
                                            <td>@record.RecordDate.ToString("dd/MM/yy")</td>
                                            <td>@record.WorkoutSessionName</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center">No personal records found.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        @{
                            var prevDisabled = Model.PersonalRecords == null || !Model.PersonalRecords.Any() || currentPage == 1;
                            var nextDisabled = Model.PersonalRecords == null || !Model.PersonalRecords.Any() || currentPage == totalPages;
                        }

                        <nav aria-label="Personal Records pagination">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(prevDisabled ? "disabled" : "")">
                                    <a class="page-link" asp-page="./Reports" asp-route-pageNumber="@(currentPage - 1)" asp-route-period="@reportPeriod" asp-route-token="@Model.ShareToken">Previous</a>
                                </li>
                                @for (var i = 1; i <= totalPages; i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <a class="page-link" asp-page="./Reports" asp-route-pageNumber="@i" asp-route-period="@reportPeriod" asp-route-token="@Model.ShareToken">@i</a>
                                    </li>
                                }
                                <li class="page-item @(nextDisabled ? "disabled" : "")">
                                    <a class="page-link" asp-page="./Reports" asp-route-pageNumber="@(currentPage + 1)" asp-route-period="@reportPeriod" asp-route-token="@Model.ShareToken">Next</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Weight Progress Chart -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card" id="weightProgressContainer" data-loading="true" style="min-height: 650px;">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Weight Progress by Exercise Type (Last @reportPeriod Days)</h5>
                    <form method="get" class="d-flex align-items-center">
                        <input type="hidden" name="pageNumber" value="@currentPage" />
                        <input type="hidden" name="token" value="@Model.ShareToken" />
                        <label for="period" class="me-2">Period:</label>
                        <select id="period" name="period" class="form-select form-select-sm" style="width: auto;" onchange="this.form.submit()">
                            <option value="30" selected="@(reportPeriod == 30)">30 Days</option>
                            <option value="60" selected="@(reportPeriod == 60)">60 Days</option>
                            <option value="90" selected="@(reportPeriod == 90)">90 Days</option>
                            <option value="120" selected="@(reportPeriod == 120)">120 Days</option>
                        </select>
                    </form>
                </div>
                <div class="card-body" style="height: 600px;">
                    <div class="text-center loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <canvas id="weightProgressChart" style="display: none;"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card" id="overallChartContainer" data-loading="true" style="min-height: 450px;">
                <div class="card-header">
                    <h5>Overall Rep Success/Failure (Last @reportPeriod Days)</h5>
                </div>
                <div class="card-body" style="height: 400px;">
                    <div class="text-center loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <canvas id="overallChart" style="display: none;"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card" id="exerciseStatusContainer" data-loading="true" style="min-height: 450px;">
                <div class="card-header">
                    <h5>Success Rate by Exercise Type (Last @reportPeriod Days)</h5>
                </div>
                <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                    <div class="text-center loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div id="exerciseStatusContent" style="display: none;">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Exercise</th>
                                    <th>Successful</th>
                                    <th>Failed</th>
                                    <th>Success Rate</th>
                                </tr>
                            </thead>
                            <tbody id="exerciseStatusTable">
                                <!-- Will be filled asynchronously -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card" id="exerciseChartContainer" data-loading="true" style="min-height: 550px;">
                <div class="card-header">
                    <h5>Recent Exercise Performance (Last @reportPeriod Days)</h5>
                </div>
                <div class="card-body">
                    <div class="text-center loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <canvas id="exerciseChart" width="800" height="600" style="display: none;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.0/dist/chartjs-adapter-moment.min.js"></script>
    
    <script>
        // Store global charts for reference
        const charts = {};
        const chartContainers = {};

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize containers for all charts
            chartContainers.weightProgress = document.getElementById('weightProgressContainer');
            chartContainers.overall = document.getElementById('overallChartContainer');
            chartContainers.exercise = document.getElementById('exerciseChartContainer');
            chartContainers.exerciseStatus = document.getElementById('exerciseStatusContainer');

            // Load data asynchronously
            loadWeightProgressChart();
            loadExerciseStatusData();
            loadOverallChartData();
        });

        // Helper function to show loading spinner
        function showSpinner(container) {
            const spinner = container.querySelector('.loading-spinner');
            if (spinner) {
                spinner.style.display = 'block';
            }
        }

        // Helper function to hide loading spinner
        function hideSpinner(container) {
            const spinner = container.querySelector('.loading-spinner');
            if (spinner) {
                spinner.style.display = 'none';
            }
        }

        // Helper function to show content
        function showContent(container, contentId) {
            const content = container.querySelector(contentId);
            if (content) {
                content.style.display = 'block';
            }
        }

        // Async functions to load data and create charts
        async function loadWeightProgressChart() {
            const container = chartContainers.weightProgress;
            const canvas = document.getElementById('weightProgressChart');
            const period = @reportPeriod;
            
            showSpinner(container);
            
            try {
                // Fetch data from API
                const response = await fetch(`/api/ReportsApi/weight-progress?days=${period}&limit=5`);
                if (!response.ok) {
                    throw new Error('Failed to fetch weight progress data');
                }
                
                const data = await response.json();
                
                // Prepare chart datasets
                const datasets = [];
                const colors = [
                    '#4CAF50', '#2196F3', '#F44336', '#FF9800', '#9C27B0', 
                    '#795548', '#607D8B', '#E91E63', '#FFEB3B', '#009688'
                ];

                data.forEach((exercise, index) => {
                    const colorIndex = index % colors.length;
                    const points = exercise.progressPoints.map(point => ({
                        x: point.date,
                        y: point.weight
                    }));
                    
                    datasets.push({
                        label: exercise.exerciseName,
                        data: points,
                        borderColor: colors[colorIndex],
                        backgroundColor: colors[colorIndex] + '33',
                        fill: false,
                        borderWidth: 2,
                        tension: 0.1,
                        pointRadius: 4
                    });
                });

                // Create chart
                charts.weightProgress = new Chart(canvas, {
                    type: 'line',
                    data: { datasets },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 0
                        },
                        interaction: {
                            mode: 'nearest',
                            axis: 'x',
                            intersect: false
                        },
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    unit: 'day',
                                    tooltipFormat: 'MMM D, YYYY',
                                    displayFormats: {
                                        day: 'MMM D'
                                    }
                                },
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Weight (kg)'
                                },
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            tooltip: {
                                enabled: true,
                                mode: 'nearest',
                                intersect: false,
                                callbacks: {
                                    title: function(context) { return moment(context[0].raw.x).format('MMMM D, YYYY'); },
                                    label: function(context) { return context.dataset.label + ': ' + context.raw.y + ' kg'; }
                                }
                            },
                            legend: {
                                position: 'top',
                                labels: {
                                    boxWidth: 12,
                                    usePointStyle: true
                                }
                            }
                        }
                    }
                });
                
                hideSpinner(container);
                canvas.style.display = 'block';
                
            } catch (error) {
                console.error('Error loading weight progress chart:', error);
                hideSpinner(container);
                
                // Show error message
                const errorMsg = document.createElement('div');
                errorMsg.className = 'alert alert-danger';
                errorMsg.textContent = 'Failed to load weight progress data. Please try again later.';
                canvas.parentNode.appendChild(errorMsg);
            }
        }

        async function loadExerciseStatusData() {
            const container = chartContainers.exerciseStatus;
            const tableBody = document.getElementById('exerciseStatusTable');
            const contentDiv = document.getElementById('exerciseStatusContent');
            const period = @reportPeriod;
            
            showSpinner(container);
            
            try {
                // Fetch data from API
                const response = await fetch(`/api/ReportsApi/exercise-status?days=${period}&limit=20`);
                if (!response.ok) {
                    throw new Error('Failed to fetch exercise status data');
                }
                
                const data = await response.json();
                
                // Clear existing table rows
                tableBody.innerHTML = '';
                
                if (!data.allExercises || data.allExercises.length === 0) {
                    const row = document.createElement('tr');
                    row.innerHTML = '<td colspan="4" class="text-center">No exercise data available.</td>';
                    tableBody.appendChild(row);
                } else {
                    // Create table rows
                    data.allExercises.forEach(exercise => {
                        const total = exercise.successReps + exercise.failedReps;
                        const successRate = total > 0 ? (exercise.successReps / total * 100).toFixed(1) : '0.0';
                        
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${exercise.exerciseName}</td>
                            <td>${exercise.successReps}</td>
                            <td>${exercise.failedReps}</td>
                            <td>${successRate}%</td>
                        `;
                        tableBody.appendChild(row);
                    });
                }
                
                // Now load the exercise chart with the same data
                loadExerciseChart(data);
                
                // Create overall chart with the summary data
                createOverallChart(data.totalSuccess, data.totalFailed);
                
                hideSpinner(container);
                contentDiv.style.display = 'block';
                
            } catch (error) {
                console.error('Error loading exercise status data:', error);
                hideSpinner(container);
                
                // Show error message
                const errorMsg = document.createElement('div');
                errorMsg.className = 'alert alert-danger';
                errorMsg.textContent = 'Failed to load exercise status data. Please try again later.';
                contentDiv.parentNode.appendChild(errorMsg);
            }
        }

        function createOverallChart(successReps, failedReps) {
            const container = chartContainers.overall;
            const canvas = document.getElementById('overallChart');
            
            showSpinner(container);
            
            try {
                charts.overall = new Chart(canvas, {
                    type: 'doughnut',
                    data: {
                        labels: ['Successful Reps', 'Failed Reps'],
                        datasets: [{
                            data: [successReps, failedReps],
                            backgroundColor: ['#4caf50', '#f44336'],
                            hoverBackgroundColor: ['#45a049', '#e53935']
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 0
                        },
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    boxWidth: 12,
                                    usePointStyle: true
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        var value = context.raw;
                                        var total = successReps + failedReps;
                                        var percentage = Math.round((value / total) * 100);
                                        return context.label + ': ' + value + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
                
                hideSpinner(container);
                canvas.style.display = 'block';
                
            } catch (error) {
                console.error('Error creating overall chart:', error);
                hideSpinner(container);
                
                // Show error message
                const errorMsg = document.createElement('div');
                errorMsg.className = 'alert alert-danger';
                errorMsg.textContent = 'Failed to load chart. Please try again later.';
                canvas.parentNode.appendChild(errorMsg);
            }
        }

        function loadExerciseChart(data) {
            const container = chartContainers.exercise;
            const canvas = document.getElementById('exerciseChart');
            
            showSpinner(container);
            
            try {
                // Use only top 10 exercises for the chart
                const topExercises = data.topExercises || [];
                
                if (topExercises.length === 0) {
                    // No data available, create empty chart
                    charts.exercise = new Chart(canvas, {
                        type: 'bar',
                        data: {
                            labels: ['No Data Available'],
                            datasets: [
                                {
                                    label: 'Successful Reps',
                                    data: [0],
                                    backgroundColor: '#4caf50',
                                },
                                {
                                    label: 'Failed Reps',
                                    data: [0],
                                    backgroundColor: '#f44336',
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: { stacked: true },
                                y: { stacked: true, beginAtZero: true }
                            }
                        }
                    });
                } else {
                    // Create chart with real data
                    const exerciseNames = topExercises.map(e => e.exerciseName);
                    const successData = topExercises.map(e => e.successReps);
                    const failedData = topExercises.map(e => e.failedReps);
                    
                    charts.exercise = new Chart(canvas, {
                        type: 'bar',
                        data: {
                            labels: exerciseNames,
                            datasets: [
                                {
                                    label: 'Successful Reps',
                                    data: successData,
                                    backgroundColor: '#4caf50',
                                },
                                {
                                    label: 'Failed Reps',
                                    data: failedData,
                                    backgroundColor: '#f44336',
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            animation: {
                                duration: 0
                            },
                            scales: {
                                x: {
                                    stacked: true,
                                    ticks: {
                                        maxRotation: 45,
                                        minRotation: 45
                                    }
                                },
                                y: {
                                    stacked: true,
                                    beginAtZero: true
                                }
                            },
                            plugins: {
                                legend: {
                                    position: 'top',
                                    labels: {
                                        boxWidth: 12,
                                        usePointStyle: true
                                    }
                                }
                            }
                        }
                    });
                }
                
                hideSpinner(container);
                canvas.style.display = 'block';
                
            } catch (error) {
                console.error('Error creating exercise chart:', error);
                hideSpinner(container);
                
                // Show error message
                const errorMsg = document.createElement('div');
                errorMsg.className = 'alert alert-danger';
                errorMsg.textContent = 'Failed to load exercise chart. Please try again later.';
                canvas.parentNode.appendChild(errorMsg);
            }
        }

        async function loadOverallChartData() {
            const period = @reportPeriod;
            
            try {
                // We already load this data with exercise status, so this function exists for future needs
                // such as loading metrics independently
                console.log('Overall chart data is loaded with exercise status data');
            } catch (error) {
                console.error('Error loading overall chart data:', error);
            }
        }
    </script>
}