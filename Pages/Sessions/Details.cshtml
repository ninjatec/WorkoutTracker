@page
@model WorkoutTrackerWeb.Pages.Sessions.DetailsModel
@{
    ViewData["Title"] = "Session Details";
}

<div class="container">
    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @Model.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>@Model.WorkoutSession.Name</h1>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editWorkoutModal">
            Edit Workout Details
        </button>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Session Summary</h5>
                    <div class="row">
                        <div class="col-12 col-sm-6">
                            <p class="mb-1"><strong>Total Volume:</strong></p>
                            <h3>@Model.TotalVolume.ToString("N1") kg</h3>
                        </div>
                        <div class="col-12 col-sm-6">
                            <p class="mb-1"><strong>Calories Burned:</strong></p>
                            <h3>@Model.TotalCalories.ToString("N0")</h3>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12 col-sm-6">
                            <p class="mb-1"><strong>Start Time:</strong></p>
                            <p>@Model.WorkoutSession.StartDateTime.ToString("g")</p>
                        </div>
                        <div class="col-12 col-sm-6">
                            <p class="mb-1"><strong>End Time:</strong></p>
                            <p>@(Model.WorkoutSession.EndDateTime?.ToString("g") ?? "In Progress")</p>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.WorkoutSession.Description))
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <p class="mb-1"><strong>Notes:</strong></p>
                                <p>@Model.WorkoutSession.Description</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Volume by Exercise</h5>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Exercise</th>
                                    <th class="text-end">Volume (kg)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.VolumeByExercise != null)
                                {
                                    foreach (var exercise in Model.VolumeByExercise.OrderByDescending(x => x.Value))
                                    {
                                        <tr>
                                            <td>@exercise.Key</td>
                                            <td class="text-end">@exercise.Value.ToString("N1")</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="2" class="text-center">No volume data available</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Exercises</h5>
            <div>
                <label class="me-2">Sort by:</label>
                <select class="form-select form-select-sm d-inline-block w-auto" id="sortSelect" asp-items="@Model.SortOptions">
                </select>
            </div>
        </div>
        <div class="card-body">
            @foreach (var exercise in Model.WorkoutSession.WorkoutExercises.OrderBy(x => x.SequenceNum))
            {
                <div class="exercise-group mb-4" id="exercise-@exercise.WorkoutExerciseId">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4>@(exercise.ExerciseType?.Name ?? "Unknown Exercise")</h4>
                        <button class="btn btn-sm btn-success add-set-btn" data-exercise-id="@exercise.WorkoutExerciseId">
                            <i class="bi bi-plus-circle"></i> Add Set
                        </button>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Weight (kg)</th>
                                    <th>Reps</th>
                                    <th>Type</th>
                                    <th>Notes</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody class="exercise-sets" data-exercise-id="@exercise.WorkoutExerciseId">
                                @foreach (var set in exercise.WorkoutSets.OrderBy(x => x.SequenceNum))
                                {
                                    <tr id="set-row-@set.WorkoutSetId" data-set-id="@set.WorkoutSetId">
                                        <td>@set.SequenceNum</td>
                                        <td>@(set.Weight?.ToString("N1") ?? "-")</td>
                                        <td>@(set.Reps?.ToString() ?? "-")</td>
                                        <td>@(set.Settype?.Name ?? "Regular")</td>
                                        <td>@set.Notes</td>
                                        <td>
                                            <button class="btn btn-sm btn-primary edit-set-btn" data-set-id="@set.WorkoutSetId">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger delete-set-btn" data-set-id="@set.WorkoutSetId">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="mt-3">
        <a asp-page="/Sessions/Index" class="btn btn-secondary">Back to List</a>
    </div>
</div>

<!-- Edit Workout Modal -->
<div class="modal fade" id="editWorkoutModal" tabindex="-1" aria-labelledby="editWorkoutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="UpdateDetails">
                <div class="modal-header">
                    <h5 class="modal-title" id="editWorkoutModalLabel">Edit Workout Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="id" value="@Model.WorkoutSession.WorkoutSessionId" />
                    
                    <div class="mb-3">
                        <label for="workoutName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="workoutName" name="name" value="@Model.WorkoutSession.Name" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="startDateTime" class="form-label">Start Time</label>
                        <input type="datetime-local" class="form-control" id="startDateTime" name="startDateTime" 
                               value="@Model.WorkoutSession.StartDateTime.ToString("yyyy-MM-ddTHH:mm")" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="endDateTime" class="form-label">End Time</label>
                        <input type="datetime-local" class="form-control" id="endDateTime" name="endDateTime" 
                               value="@(Model.WorkoutSession.EndDateTime?.ToString("yyyy-MM-ddTHH:mm"))">
                    </div>
                    
                    <div class="mb-3">
                        <label for="description" class="form-label">Notes</label>
                        <textarea class="form-control" id="description" name="description" rows="3">@Model.WorkoutSession.Description</textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Set Modal -->
<div class="modal fade" id="editSetModal" tabindex="-1" aria-labelledby="editSetModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editSetModalLabel">Edit Set</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editSetId">
                <input type="hidden" id="editExerciseId">
                
                <div class="mb-3">
                    <label for="editWeight" class="form-label">Weight (kg)</label>
                    <input type="number" class="form-control" id="editWeight" step="0.5" min="0">
                </div>
                
                <div class="mb-3">
                    <label for="editReps" class="form-label">Reps</label>
                    <input type="number" class="form-control" id="editReps" min="0">
                </div>
                
                <div class="mb-3">
                    <label for="editSetType" class="form-label">Set Type</label>
                    <select class="form-select" id="editSetType">
                        <!-- Will be populated dynamically -->
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="editNotes" class="form-label">Notes</label>
                    <input type="text" class="form-control" id="editNotes">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveSetChanges">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Set Modal -->
<div class="modal fade" id="addSetModal" tabindex="-1" aria-labelledby="addSetModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSetModalLabel">Add New Set</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="addExerciseId">
                
                <div class="mb-3">
                    <label for="addWeight" class="form-label">Weight (kg)</label>
                    <input type="number" class="form-control" id="addWeight" step="0.5" min="0">
                </div>
                
                <div class="mb-3">
                    <label for="addReps" class="form-label">Reps</label>
                    <input type="number" class="form-control" id="addReps" min="0">
                </div>
                
                <div class="mb-3">
                    <label for="addSetType" class="form-label">Set Type</label>
                    <select class="form-select" id="addSetType">
                        <!-- Will be populated dynamically -->
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="addNotes" class="form-label">Notes</label>
                    <input type="text" class="form-control" id="addNotes">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveNewSet">Add Set</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this set? This action cannot be undone.
                <input type="hidden" id="deleteSetId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        const settypeOptions = [];
        
        $(document).ready(function() {
            // Load set types
            loadSetTypes();
            
            // Event handlers
            $('.add-set-btn').click(function() {
                const exerciseId = $(this).data('exercise-id');
                $('#addExerciseId').val(exerciseId);
                populateSetTypeDropdown('#addSetType');
                $('#addSetModal').modal('show');
            });
            
            $('.edit-set-btn').click(function() {
                const setId = $(this).data('set-id');
                loadSetDetails(setId);
            });
            
            $('.delete-set-btn').click(function() {
                const setId = $(this).data('set-id');
                $('#deleteSetId').val(setId);
                $('#confirmDeleteModal').modal('show');
            });
            
            $('#saveNewSet').click(function() {
                addNewSet();
            });
            
            $('#saveSetChanges').click(function() {
                updateSet();
            });
            
            $('#confirmDeleteBtn').click(function() {
                deleteSet($('#deleteSetId').val());
            });
            
            // Sort dropdown change handler
            $('#sortSelect').change(function() {
                const sortBy = $(this).val();
                sortExercises(sortBy);
            });
        });
        
        function loadSetTypes() {
            $.ajax({
                url: '/api/WorkoutSetsApi/SettypeOptions',
                method: 'GET',
                success: function(data) {
                    settypeOptions.length = 0;
                    data.forEach(item => settypeOptions.push(item));
                    
                    // Pre-populate dropdowns if needed
                    populateSetTypeDropdown('#addSetType');
                    populateSetTypeDropdown('#editSetType');
                },
                error: function(xhr) {
                    console.error('Error loading set types:', xhr);
                    showToast('Error', 'Failed to load set types. Please refresh the page.', 'error');
                }
            });
        }
        
        function populateSetTypeDropdown(selector) {
            const dropdown = $(selector);
            dropdown.empty();
            
            // Add default option
            dropdown.append($('<option>', {
                value: '',
                text: 'Regular'
            }));
            
            // Add options from API
            settypeOptions.forEach(option => {
                dropdown.append($('<option>', {
                    value: option.id,
                    text: option.name
                }));
            });
        }
        
        function loadSetDetails(setId) {
            $.ajax({
                url: `/api/WorkoutSetsApi/${setId}`,
                method: 'GET',
                success: function(data) {
                    $('#editSetId').val(data.workoutSetId);
                    $('#editExerciseId').val(data.workoutExerciseId);
                    $('#editWeight').val(data.weight);
                    $('#editReps').val(data.reps);
                    $('#editNotes').val(data.notes);
                    
                    populateSetTypeDropdown('#editSetType');
                    if (data.settypeId) {
                        $('#editSetType').val(data.settypeId);
                    }
                    
                    $('#editSetModal').modal('show');
                },
                error: function(xhr) {
                    console.error('Error loading set details:', xhr);
                    showToast('Error', 'Failed to load set details. Please try again.', 'error');
                }
            });
        }
          function addNewSet() {
            const exerciseId = $('#addExerciseId').val();
            const weight = $('#addWeight').val();
            const reps = $('#addReps').val();
            const settypeId = $('#addSetType').val() || null;
            const notes = $('#addNotes').val();
            
            const payload = {
                workoutExerciseId: parseInt(exerciseId),
                weight: weight ? parseFloat(weight) : null,
                reps: reps ? parseInt(reps) : null,
                settypeId: settypeId ? parseInt(settypeId) : null,
                notes: notes,
                isCompleted: true,
                timestamp: new Date().toISOString()
            };
            
            $.ajax({
                url: '/api/WorkoutSetsApi',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function() {
                    $('#addSetModal').modal('hide');
                    
                    // Clear form fields
                    $('#addWeight').val('');
                    $('#addReps').val('');
                    $('#addSetType').val('');
                    $('#addNotes').val('');
                    
                    // Reload page to see new set
                    location.reload();
                },
                error: function(xhr) {
                    console.error('Error adding set:', xhr);
                    showToast('Error', 'Failed to add set. Please try again.', 'error');
                }
            });
        }
          function updateSet() {
            const setId = $('#editSetId').val();
            const exerciseId = $('#editExerciseId').val();
            const weight = $('#editWeight').val();
            const reps = $('#editReps').val();
            const settypeId = $('#editSetType').val() || null;
            const notes = $('#editNotes').val();
            
            const payload = {
                workoutSetId: parseInt(setId),
                workoutExerciseId: parseInt(exerciseId),
                weight: weight ? parseFloat(weight) : null,
                reps: reps ? parseInt(reps) : null,
                settypeId: settypeId ? parseInt(settypeId) : null,
                notes: notes,
                isCompleted: true,
                timestamp: new Date().toISOString()
            };
            
            $.ajax({
                url: `/api/WorkoutSetsApi/${setId}`,
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function() {
                    $('#editSetModal').modal('hide');
                    
                    // Reload page to see updated set
                    location.reload();
                },
                error: function(xhr) {
                    console.error('Error updating set:', xhr);
                    showToast('Error', 'Failed to update set. Please try again.', 'error');
                }
            });
        }
        
        function deleteSet(setId) {
            $.ajax({
                url: `/api/WorkoutSetsApi/${setId}`,
                method: 'DELETE',
                success: function() {
                    $('#confirmDeleteModal').modal('hide');
                    
                    // Remove the row from the table
                    $(`#set-row-${setId}`).remove();
                    
                    // If no sets left, reload to update UI
                    location.reload();
                },
                error: function(xhr) {
                    console.error('Error deleting set:', xhr);
                    $('#confirmDeleteModal').modal('hide');
                    showToast('Error', 'Failed to delete set. Please try again.', 'error');
                }
            });
        }
        
        function sortExercises(sortBy) {
            // Implement client-side sorting if needed
            // For now, we'll just reload with the sort parameter
            const url = new URL(window.location.href);
            url.searchParams.set('sort', sortBy);
            window.location.href = url.toString();
        }
        
        function showToast(title, message, type) {
            // Implement toast notifications or alerts
            alert(`${title}: ${message}`);
        }
    </script>
}
