@page
@model WorkoutTrackerWeb.Pages.Account.DeleteWorkoutDataModel
@{
    ViewData["Title"] = "Delete All Workout Data";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-danger text-white">
                    <h4 class="mb-0">Delete All Workout Data</h4>
                </div>
                <div class="card-body">
                    <div class="alert alert-warning">
                        <h5>Warning!</h5>
                        <p>You are about to delete all your workout data. This includes:</p>
                        <ul>
                            <li>All workout sessions</li>
                            <li>All exercise sets</li>
                            <li>All repetition records</li>
                        </ul>
                        <p class="mb-0"><strong>This action cannot be undone.</strong> Your account will remain active, but all workout history will be permanently deleted.</p>
                    </div>

                    <form method="post" id="deleteForm">
                        <div class="form-group mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="confirmDelete" name="confirmDelete" asp-for="ConfirmDelete">
                                <label class="form-check-label" for="confirmDelete">
                                    I understand that this will permanently delete all my workout data
                                </label>
                            </div>
                            <span asp-validation-for="ConfirmDelete" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-page="/Account/Manage/Index" class="btn btn-secondary">Cancel</a>
                            <button type="submit" class="btn btn-danger" id="deleteButton">Delete All Workout Data</button>
                        </div>
                    </form>

                    @if (!string.IsNullOrEmpty(Model.Message))
                    {
                        <div class="alert @(Model.Success ? "alert-success" : "alert-danger") mt-4" role="alert">
                            @Model.Message
                        </div>
                    }
                    
                    <!-- Progress Section - Hidden by default -->
                    <div id="progressSection" class="mt-4 d-none">
                        <h5 id="progressStatus">Deletion in progress...</h5>
                        <div class="progress mb-3">
                            <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated bg-info" 
                                 role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">
                                0%
                            </div>
                        </div>
                        <div id="progressDetails" class="small text-muted"></div>
                        <div id="errorMessage" class="alert alert-danger mt-3 d-none"></div>
                        
                        <div class="mt-3">
                            <p class="text-info">
                                <i class="fa fa-info-circle"></i>
                                You can leave this page if you wish. The deletion will continue in the background.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/microsoft/signalr/dist/signalr.min.js"></script>
    <style>
        .deleting {
            cursor: wait !important;
        }
        #connectionStatus {
            display: inline-block;
            padding: 0.3rem 0.6rem;
            font-size: 0.75rem;
        }
        #connectionStatus.connected {
            background-color: var(--bs-success);
        }
        #connectionStatus.disconnected {
            background-color: var(--bs-danger);
        }
        #connectionStatus.reconnecting {
            background-color: var(--bs-warning);
        }
    </style>

    <script>
        // Get form and button elements
        const form = document.getElementById('deleteForm');
        const deleteButton = document.getElementById('deleteButton');
        const confirmCheckbox = document.getElementById('@Html.IdFor(m => m.ConfirmDelete)');
        const progressSection = document.getElementById('progressSection');
        const progressBar = document.getElementById('progressBar');
        const progressStatus = document.getElementById('progressStatus');
        const progressDetails = document.getElementById('progressDetails');
        const errorMessage = document.getElementById('errorMessage');
        
        // SignalR connection state tracking
        let isConnected = false;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;
        let jobRegistered = false;
        let jobStatusCheckInterval;
        
        // Connect to SignalR hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/importProgressHub", {
                skipNegotiation: false,
                transport: signalR.HttpTransportType.WebSockets | 
                           signalR.HttpTransportType.ServerSentEvents | 
                           signalR.HttpTransportType.LongPolling
            })
            .withAutomaticReconnect([0, 1000, 2000, 5000, 10000, 30000])
            .configureLogging(signalR.LogLevel.Warning)
            .build();
            
        // Track connection state changes
        connection.onreconnecting((error) => {
            console.warn("SignalR reconnecting due to error:", error);
            if (document.getElementById('connectionStatus')) {
                document.getElementById('connectionStatus').textContent = "Reconnecting...";
                document.getElementById('connectionStatus').className = "badge reconnecting bg-warning";
            }
            isConnected = false;
            reconnectAttempts++;
            
            // Don't hide the progress section - the job is still running even if we lose connection
            if (reconnectAttempts > maxReconnectAttempts) {
                if (document.getElementById('connectionStatus')) {
                    document.getElementById('connectionStatus').textContent = "Connection Lost";
                    document.getElementById('connectionStatus').className = "badge disconnected bg-danger";
                }
                errorMessage.textContent = "Lost connection to server and couldn't reconnect. Your delete operation is still running. The page will check status periodically.";
                errorMessage.classList.remove('d-none');
                
                // Start polling for job status since we can't get realtime updates
                startJobStatusPolling();
            }
        });
        
        connection.onreconnected((connectionId) => {
            console.log("SignalR reconnected with ID:", connectionId);
            if (document.getElementById('connectionStatus')) {
                document.getElementById('connectionStatus').textContent = "Connected";
                document.getElementById('connectionStatus').className = "badge connected bg-success";
            }
            isConnected = true;
            reconnectAttempts = 0;
            
            // Hide any previous connection errors
            if (errorMessage.textContent.includes("connection")) {
                errorMessage.classList.add('d-none');
            }
            
            // Re-register for job updates if we have a job ID
            const jobId = "@Model.JobId";
            if (jobId && !jobRegistered) {
                registerForJobUpdates(jobId);
            }
            
            // Clear the polling interval if we're reconnected
            clearJobStatusPolling();
        });
        
        connection.onclose((error) => {
            console.error("SignalR connection closed", error);
            if (document.getElementById('connectionStatus')) {
                document.getElementById('connectionStatus').textContent = "Disconnected";
                document.getElementById('connectionStatus').className = "badge disconnected bg-danger";
            }
            isConnected = false;
            
            // Show error only if we have an active job
            const jobId = "@Model.JobId";
            if (jobId && !progressBar.classList.contains('bg-success')) {
                errorMessage.textContent = "Lost connection to server. Your delete operation is still running. The page will check status periodically.";
                errorMessage.classList.remove('d-none');
                
                // Start polling for job status
                startJobStatusPolling();
            }
        });

        // Handle connection status updates from the server
        connection.on("connectionstatus", (data) => {
            console.log("Connection status update:", data);
            
            if (data.isConnected) {
                if (document.getElementById('connectionStatus')) {
                    document.getElementById('connectionStatus').textContent = "Connected";
                    document.getElementById('connectionStatus').className = "badge connected bg-success";
                }
                isConnected = true;
            } else {
                if (document.getElementById('connectionStatus')) {
                    document.getElementById('connectionStatus').textContent = "Disconnected";
                    document.getElementById('connectionStatus').className = "badge disconnected bg-danger";
                }
                isConnected = false;
            }
        });
        
        // Handle job registration status updates from the server
        connection.on("jobregistrationstatus", (data) => {
            console.log("Job registration status:", data);
            
            if (data.success) {
                jobRegistered = true;
                console.log(data.message);
            } else {
                jobRegistered = false;
                console.error("Failed to register for job updates:", data.message);
                
                // Try again after a delay if we're still connected
                if (isConnected && data.jobId) {
                    setTimeout(() => registerForJobUpdates(data.jobId), 3000);
                }
            }
        });

        // Handle progress updates
        connection.on("receiveProgress", (progress) => {
            console.log("ReceiveProgress:", progress);
            
            // Show progress section
            progressSection.classList.remove('d-none');
            
            // Update progress bar
            const percent = progress.percentComplete || 0;
            progressBar.style.width = `${percent}%`;
            progressBar.setAttribute('aria-valuenow', percent);
            progressBar.textContent = `${percent}%`;
            
            // Update status text
            progressStatus.textContent = progress.status || "Processing...";
            
            // Update details
            if (progress.details) {
                progressDetails.textContent = progress.details;
                if (progress.processedItems && progress.totalItems) {
                    progressDetails.textContent += ` (${progress.processedItems} of ${progress.totalItems} items)`;
                }
            }
            
            // Handle error
            if (progress.status === "Error" && progress.errorMessage) {
                errorMessage.textContent = progress.errorMessage;
                errorMessage.classList.remove('d-none');
                progressBar.classList.remove('bg-info');
                progressBar.classList.add('bg-danger');
                deleteButton.disabled = false;
                deleteButton.textContent = "Delete All Workout Data";
                document.body.classList.remove('deleting');
                
                // Clear any status polling
                clearJobStatusPolling();
            }
            
            // Handle completion
            if (progress.status === "Completed") {
                progressBar.classList.remove('bg-info');
                progressBar.classList.add('bg-success');
                deleteButton.disabled = false;
                deleteButton.textContent = "Delete All Workout Data";
                document.body.classList.remove('deleting');
                
                // Clear any status polling
                clearJobStatusPolling();
                
                // Optionally, after a delay, reload the page or redirect to show empty data state
                setTimeout(() => {
                    window.location.reload();
                }, 3000);
            }
        });
        
        // Helper function to register for job updates
        function registerForJobUpdates(jobId) {
            if (!jobId || !isConnected) return;
            
            console.log("Attempting to register for updates on job:", jobId);
            
            connection.invoke("RegisterForJobUpdates", jobId)
                .then(() => {
                    console.log("Successfully registered for updates on job:", jobId);
                    jobRegistered = true;
                    
                    // Also show the progress section since we're monitoring a job
                    progressSection.classList.remove('d-none');
                })
                .catch(err => {
                    console.error("Error registering for job updates:", err);
                    // Try again later if we're still connected
                    if (isConnected) {
                        setTimeout(() => registerForJobUpdates(jobId), 3000);
                    }
                });
        }
        
        // Function to start polling for job status updates when SignalR is not available
        function startJobStatusPolling() {
            // Clear any existing interval
            clearJobStatusPolling();
            
            const jobId = "@Model.JobId";
            if (!jobId) return;
            
            console.log("Starting job status polling for job:", jobId);
            
            // Poll every 5 seconds
            jobStatusCheckInterval = setInterval(() => {
                checkJobStatus(jobId);
            }, 5000);
        }
        
        // Function to clear job status polling
        function clearJobStatusPolling() {
            if (jobStatusCheckInterval) {
                clearInterval(jobStatusCheckInterval);
                jobStatusCheckInterval = null;
            }
        }
        
        // Function to check job status via AJAX when SignalR is not available
        function checkJobStatus(jobId) {
            if (!jobId) return;
            
            console.log("Checking job status for:", jobId);
            
            // Make a simple AJAX request to check job status
            fetch(`/api/jobstatus/${jobId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Job status response:", data);
                    
                    if (data.state) {
                        // Update UI based on job state
                        if (data.state === "Succeeded") {
                            // Job completed successfully
                            progressBar.classList.remove('bg-info');
                            progressBar.classList.add('bg-success');
                            progressStatus.textContent = "Delete operation completed successfully";
                            progressBar.style.width = "100%";
                            progressBar.setAttribute('aria-valuenow', 100);
                            progressBar.textContent = "100%";
                            
                            // Refresh the page to show results
                            window.location.reload();
                        } 
                        else if (data.state === "Failed") {
                            // Job failed
                            progressBar.classList.remove('bg-info');
                            progressBar.classList.add('bg-danger');
                            progressStatus.textContent = "Delete operation failed";
                            
                            if (data.errorMessage) {
                                errorMessage.textContent = data.errorMessage;
                                errorMessage.classList.remove('d-none');
                            }
                            
                            // Clear the interval since we have a final state
                            clearJobStatusPolling();
                        }
                        else if (data.state === "Processing" || data.state === "Scheduled" || data.state === "Enqueued") {
                            // Job is still in progress
                            progressStatus.textContent = `Delete operation in progress (Status: ${data.state})`;
                            
                            // Keep the poll running
                        }
                        else {
                            // Unknown state
                            progressStatus.textContent = `Delete operation status: ${data.state}`;
                        }
                    }
                })
                .catch(error => {
                    console.error("Error checking job status:", error);
                    // Don't stop polling on errors, just try again next time
                });
        }
        
        // Start the connection and register for job updates if needed
        function startConnection() {
            console.log("Starting SignalR connection...");
            
            connection.start()
                .then(() => {
                    console.log("SignalR connected!");
                    if (document.getElementById('connectionStatus')) {
                        document.getElementById('connectionStatus').textContent = "Connected";
                        document.getElementById('connectionStatus').className = "badge connected bg-success";
                    }
                    isConnected = true;
                    reconnectAttempts = 0;
                    
                    // Register for job updates if we have a job ID
                    const jobId = "@Model.JobId";
                    if (jobId && !jobRegistered) {
                        registerForJobUpdates(jobId);
                    }
                })
                .catch(err => {
                    console.error("SignalR Connection Error: ", err);
                    if (document.getElementById('connectionStatus')) {
                        document.getElementById('connectionStatus').textContent = "Connection Failed";
                        document.getElementById('connectionStatus').className = "badge disconnected bg-danger";
                    }
                    
                    // If we have a job ID, start polling as fallback
                    const jobId = "@Model.JobId";
                    if (jobId) {
                        startJobStatusPolling();
                    }
                    
                    // Try to reconnect after a delay
                    setTimeout(startConnection, 5000);
                });
        }

        // Add form submit handler
        form.addEventListener('submit', function(e) {
            // Make sure confirmCheckbox exists before checking its properties
            if (confirmCheckbox && !confirmCheckbox.checked) {
                e.preventDefault();
                return;
            }

            // Add waiting cursor to body
            document.body.classList.add('deleting');
            // Disable the delete button
            deleteButton.disabled = true;
            deleteButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...';
            
            // Show progress section immediately
            progressSection.classList.remove('d-none');
            progressStatus.textContent = "Submitting delete request...";
            progressDetails.textContent = "Preparing to delete all workout data";
        });
        
        // Show progress section if we have a job ID (background job is running)
        @if (!string.IsNullOrEmpty(Model.JobId))
        {
            <text>
            progressSection.classList.remove('d-none');
            
            // Update initial progress based on job state
            const jobState = "@Model.JobState";
            if (jobState === "Processing" || jobState === "Scheduled" || jobState === "Enqueued") {
                progressStatus.textContent = `Delete operation in progress (Status: ${jobState})`;
                progressBar.classList.add('bg-info');
                progressBar.classList.add('progress-bar-animated');
                progressBar.classList.add('progress-bar-striped');
            }
            else if (jobState === "Succeeded") {
                progressStatus.textContent = "Delete operation completed successfully";
                progressBar.classList.remove('bg-info');
                progressBar.classList.add('bg-success');
                progressBar.style.width = "100%";
                progressBar.setAttribute('aria-valuenow', 100);
                progressBar.textContent = "100%";
            }
            else if (jobState === "Failed") {
                progressStatus.textContent = "Delete operation failed";
                progressBar.classList.remove('bg-info');
                progressBar.classList.add('bg-danger');
                const errorMsg = document.createElement('div');
                errorMsg.textContent = "The delete operation failed. Check logs for details.";
                errorMsg.classList.add('alert', 'alert-danger', 'mt-3');
                progressSection.appendChild(errorMsg);
            }
            </text>
        }
        
        // Add connection status indicator to the page
        function addConnectionStatusIndicator() {
            // Create connection status indicator if it doesn't exist
            if (!document.getElementById('connectionStatus')) {
                const statusDiv = document.createElement('div');
                statusDiv.id = 'connectionStatusContainer';
                statusDiv.className = 'mt-3 text-center';
                statusDiv.innerHTML = '<small>Connection Status: <span id="connectionStatus" class="badge">Connecting...</span></small>';
                
                if (progressSection) {
                    // Add it to the progress section
                    progressSection.appendChild(statusDiv);
                }
            }
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM loaded");
            
            // Add connection status indicator
            addConnectionStatusIndicator();
            
            // Start SignalR connection
            startConnection();
        });
    </script>
}