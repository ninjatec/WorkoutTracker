@page
@model WorkoutTrackerWeb.Pages.ExerciseTypes.IndexModel

@{
    ViewData["Title"] = "Exercise Types";
}

<h1>Exercise Types</h1>

<div class="row mb-3">
    <div class="col-md-6">
        <a asp-page="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New
        </a>
        @if (User.IsInRole("Admin"))
        {
            <a asp-page="ApiImport" class="btn btn-info">
                <i class="fas fa-cloud-download-alt"></i> Import from API
            </a>
            <a asp-page="EnrichExercises" class="btn btn-warning">
                <i class="fas fa-magic"></i> Enrich Exercises
            </a>
        }
    </div>
    <div class="col-md-6">
        <form method="get" class="d-flex">
            <input type="text" name="SearchString" value="@Model.CurrentFilter" class="form-control me-2" placeholder="Search by name, type, or muscle..." />
            <button type="submit" class="btn btn-outline-primary">
                <i class="fas fa-search"></i> Search
            </button>
        </form>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>
                    <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.ExerciseTypes[0].Name)
                    </a>
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortOrder="@Model.TypeSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.ExerciseTypes[0].Type)
                    </a>
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortOrder="@Model.MuscleSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.ExerciseTypes[0].Muscle)
                    </a>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ExerciseTypes[0].Difficulty)
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var item in Model.ExerciseTypes) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                    @if (item.IsFromApi)
                    {
                        <span class="badge bg-info text-white ms-1">API</span>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Muscle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Difficulty)
                </td>
                <td>
                    <div class="btn-group" role="group">
                        <a asp-page="./Edit" asp-route-id="@item.ExerciseTypeId" class="btn btn-sm btn-primary">
                            <i class="fas fa-edit"></i> Edit
                        </a>
                        <a asp-page="./Details" asp-route-id="@item.ExerciseTypeId" class="btn btn-sm btn-info">
                            <i class="fas fa-info-circle"></i> Details
                        </a>
                        <a asp-page="./Delete" asp-route-id="@item.ExerciseTypeId" class="btn btn-sm btn-danger">
                            <i class="fas fa-trash"></i> Delete
                        </a>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@if (!Model.ExerciseTypes.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> No exercise types found. 
        @if (User.IsInRole("Admin"))
        {
            <span>Consider <a asp-page="ApiImport">importing exercises from the API</a>.</span>
        }
    </div>
}

<div class="d-flex justify-content-center">
    <nav>
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a asp-page="./Index"
                       asp-route-sortOrder="@Model.CurrentSort"
                       asp-route-pageIndex="@(Model.PageIndex - 1)"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                        Previous
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li>
            }

            @for (var i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a asp-page="./Index"
                       asp-route-sortOrder="@Model.CurrentSort"
                       asp-route-pageIndex="@i"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                        @i
                    </a>
                </li>
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a asp-page="./Index"
                       asp-route-sortOrder="@Model.CurrentSort"
                       asp-route-pageIndex="@(Model.PageIndex + 1)"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                        Next
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Next</span>
                </li>
            }
        </ul>
    </nav>
</div>