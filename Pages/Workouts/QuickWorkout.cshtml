@page
@model WorkoutTrackerWeb.Pages.Workouts.QuickWorkoutModel
@{
    ViewData["Title"] = "Quick Workout";
    var statusAlert = !string.IsNullOrEmpty(Model.QuickWorkout.StatusMessage) ? "alert-info" : "";
}

<div class="container-fluid mt-3 quick-workout-container">
    <h2 class="display-6">Quick Workout</h2>
    <p class="lead">Add exercises with minimal clicks - optimized for gym use.</p>

    @if (!string.IsNullOrEmpty(Model.QuickWorkout.StatusMessage))
    {
        <div class="alert @statusAlert alert-dismissible fade show" role="alert">
            @Model.QuickWorkout.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Timer container div -->
    <div id="timer-container"></div>

    <!-- Floating timer button (mobile only) - now this will switch to timer tab -->
    <button type="button" class="floating-timer-button" id="floating-timer-button" aria-label="Timer">
        <i class="bi bi-stopwatch"></i>
    </button>

    <!-- Reordering container for mobile UI - Active Session moves to bottom -->
    <div class="row g-3 mb-4 workout-session-container">
        <!-- Add set card - always at the top -->
        <div class="col-12 col-md-6 order-1">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-plus-circle-dotted me-2"></i>Add Set
                    </h5>
                </div>
                <div class="card-body">
                    @if (!Model.QuickWorkout.HasActiveSession)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Start a session first to add exercises
                        </div>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="AddSet">
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.ExerciseTypeId" class="form-label">Exercise</label>
                                        <select asp-for="QuickWorkout.ExerciseTypeId" class="form-select" 
                                                asp-items="Model.QuickWorkout.ExerciseTypeSelectList" required>
                                            <option value="">-- Select Exercise --</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.SettypeId" class="form-label">Set Type</label>
                                        <select asp-for="QuickWorkout.SettypeId" class="form-select" 
                                                asp-items="Model.QuickWorkout.SetTypeSelectList" required>
                                            <option value="">-- Select Type --</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.Weight" class="form-label">Weight (kg)</label>
                                        <input asp-for="QuickWorkout.Weight" type="number" min="0" step="0.5" class="form-control" required />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.NumberReps" class="form-label">Reps</label>
                                        <input asp-for="QuickWorkout.NumberReps" type="number" class="form-control" required />
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3 form-check">
                                <input asp-for="QuickWorkout.AllSuccessful" class="form-check-input" type="checkbox" />
                                <label asp-for="QuickWorkout.AllSuccessful" class="form-check-label">All reps successful</label>
                            </div>
                            <button type="submit" class="btn btn-success w-100">
                                <i class="bi bi-plus-lg me-1"></i> Add Set
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>

        <!-- Active session card - moved to bottom on mobile with order-2 order-md-1 -->
        <div class="col-12 col-md-6 order-2 order-md-1 active-session-container">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex align-items-center">
                    <h5 class="mb-0">
                        @if (Model.QuickWorkout.HasActiveSession)
                        {
                            <span class="text-success">
                                <i class="bi bi-play-circle-fill me-2"></i>Active Session
                            </span>
                        }
                        else
                        {
                            <span class="text-secondary">
                                <i class="bi bi-plus-circle me-2"></i>Start New Session
                            </span>
                        }
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.QuickWorkout.HasActiveSession && Model.QuickWorkout.CurrentSession != null)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="card-title mb-0">@Model.QuickWorkout.CurrentSession.Name</h5>
                            <span class="badge bg-primary">
                                Started @Model.QuickWorkout.CurrentSession.datetime.ToString("HH:mm")
                            </span>
                        </div>
                        <div class="d-flex gap-2 mt-2">
                            <a asp-page="/Sessions/Details" asp-route-id="@Model.QuickWorkout.CurrentSession.SessionId" 
                               class="btn btn-outline-primary flex-grow-1">
                                <i class="bi bi-eye me-1"></i> View Details
                            </a>
                            <form method="post" asp-page-handler="FinishSession" class="d-inline flex-grow-1">
                                <button type="submit" class="btn btn-outline-success w-100" 
                                        onclick="return confirm('Are you sure you want to finish this workout session?')">
                                    <i class="bi bi-check-circle me-1"></i> Finish Workout
                                </button>
                            </form>
                        </div>
                        <div class="mt-2 d-grid">
                            <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#newWorkoutModal">
                                <i class="bi bi-plus-circle me-1"></i> Start New Workout
                            </button>
                        </div>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="CreateSession">
                            <div class="mb-3">
                                <label asp-for="QuickWorkout.NewSessionName" class="form-label">Session Name</label>
                                <input asp-for="QuickWorkout.NewSessionName" class="form-control" 
                                       value="@Model.QuickWorkout.NewSessionName" />
                            </div>
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="bi bi-play-fill me-1"></i> Start Workout
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3 mb-4">
        <!-- Recent sets card -->
        @if (Model.QuickWorkout.HasActiveSession && Model.QuickWorkout.RecentSets.Any())
        {
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-clock-history me-2"></i>Recent Sets
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Exercise</th>
                                        <th>Type</th>
                                        <th>Weight</th>
                                        <th>Reps</th>
                                        <th>Added</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var set in Model.QuickWorkout.RecentSets)
                                    {
                                        <tr>
                                            <td>@set.ExerciseType?.Name</td>
                                            <td>@set.Settype?.Name</td>
                                            <td>@set.Weight kg</td>
                                            <td>@set.NumberReps</td>
                                            <td>Just now</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Exercise selection tabs -->
    <div class="row g-3 mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light p-0">
                    <ul class="nav nav-tabs nav-fill card-header-tabs border-bottom-0" id="exerciseTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active py-3 fw-medium" id="recent-tab" data-bs-toggle="tab" data-bs-target="#recent" 
                                    type="button" role="tab" aria-controls="recent" aria-selected="true">
                                <i class="bi bi-clock-history me-2"></i>Recent
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link py-3 fw-medium" id="popular-tab" data-bs-toggle="tab" data-bs-target="#popular" 
                                    type="button" role="tab" aria-controls="popular" aria-selected="false">
                                <i class="bi bi-star-fill me-2"></i>Popular
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link py-3 fw-medium" id="muscle-tab" data-bs-toggle="tab" data-bs-target="#muscle" 
                                    type="button" role="tab" aria-controls="muscle" aria-selected="false">
                                <i class="bi bi-list-ul me-2"></i>By Muscle
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link py-3 fw-medium" id="timer-tab" data-bs-toggle="tab" data-bs-target="#timer" 
                                    type="button" role="tab" aria-controls="timer" aria-selected="false">
                                <i class="bi bi-stopwatch me-2"></i>Timer
                            </button>
                        </li>
                    </ul>
                </div>
                <div class="card-body pt-4">
                    <div class="tab-content" id="exerciseTabsContent">
                        <!-- Recent exercises tab -->
                        <div class="tab-pane fade show active" id="recent" role="tabpanel" aria-labelledby="recent-tab">
                            <div class="row row-cols-2 row-cols-md-4 g-3">
                                @if (Model.QuickWorkout.RecentExercises.Any())
                                {
                                    @foreach (var exercise in Model.QuickWorkout.RecentExercises)
                                    {
                                        <div class="col">
                                            <div class="card h-100 quick-exercise-card" 
                                                 data-exercise-id="@exercise.ExerciseType.ExerciseTypeId" 
                                                 data-exercise-name="@exercise.ExerciseType.Name">
                                                <div class="card-body p-2">
                                                    <h6 class="card-title mb-1">@exercise.ExerciseType.Name</h6>
                                                    <p class="card-text small text-muted mb-0">
                                                        @exercise.ExerciseType.Muscle
                                                        <span class="badge bg-secondary float-end">@exercise.UseCount</span>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-12">
                                        <p class="text-muted">No recent exercises found</p>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- Popular exercises tab -->
                        <div class="tab-pane fade" id="popular" role="tabpanel" aria-labelledby="popular-tab">
                            <div class="row row-cols-2 row-cols-md-4 g-3">
                                @if (Model.QuickWorkout.FavoriteExercises.Any())
                                {
                                    @foreach (var exercise in Model.QuickWorkout.FavoriteExercises)
                                    {
                                        <div class="col">
                                            <div class="card h-100 quick-exercise-card" 
                                                 data-exercise-id="@exercise.ExerciseTypeId" 
                                                 data-exercise-name="@exercise.Name">
                                                <div class="card-body p-2">
                                                    <h6 class="card-title mb-1">@exercise.Name</h6>
                                                    <p class="card-text small text-muted mb-0">
                                                        @exercise.Muscle
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-12">
                                        <p class="text-muted">No popular exercises found</p>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- By muscle group tab -->
                        <div class="tab-pane fade" id="muscle" role="tabpanel" aria-labelledby="muscle-tab">
                            <div class="row mb-4">
                                <div class="col-12">
                                    <div class="d-flex flex-wrap gap-2" id="muscle-group-filters">
                                        @foreach (var muscle in Model.QuickWorkout.MuscleGroups)
                                        {
                                            <button type="button" 
                                                   class="btn btn-sm @(muscle == Model.QuickWorkout.SelectedMuscleGroup ? "btn-primary" : "btn-outline-secondary")"
                                                   data-muscle-group="@muscle">
                                                @muscle.Replace("_", " ")
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row row-cols-2 row-cols-md-4 g-3">
                                @if (!string.IsNullOrEmpty(Model.QuickWorkout.SelectedMuscleGroup))
                                {
                                    @if (Model.QuickWorkout.ExerciseTypeSelectList.Any())
                                    {
                                        @foreach (var item in Model.QuickWorkout.ExerciseTypeSelectList)
                                        {
                                            <div class="col">
                                                <div class="card h-100 quick-exercise-card" 
                                                     data-exercise-id="@item.Value" 
                                                     data-exercise-name="@item.Text">
                                                    <div class="card-body p-2">
                                                        <h6 class="card-title mb-1">@item.Text</h6>
                                                        <p class="card-text small text-muted mb-0">
                                                            @Model.QuickWorkout.SelectedMuscleGroup
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="col-12">
                                            <p class="text-muted">No exercises found for this muscle group</p>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-12">
                                        <p class="text-muted">Select a muscle group to view exercises</p>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- Timer tab - newly added -->
                        <div class="tab-pane fade" id="timer" role="tabpanel" aria-labelledby="timer-tab">
                            <div class="row">
                                <div class="col-12 col-md-8 col-lg-6 mx-auto">
                                    <div class="card timer-card">
                                        <div class="card-header">
                                            <h5 class="mb-0"><i class="bi bi-stopwatch me-2"></i>Workout Timer</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex justify-content-center mb-4">
                                                <div class="btn-group" role="group" aria-label="Timer Type">
                                                    <button type="button" class="btn btn-outline-info timer-type-selector" data-timer-type="rest">
                                                        Rest Timer
                                                    </button>
                                                    <button type="button" class="btn btn-outline-success timer-type-selector active" data-timer-type="exercise">
                                                        Exercise Timer
                                                    </button>
                                                </div>
                                            </div>
                                            
                                            <div class="timer-display-container text-center mb-4">
                                                <div class="timer-display">
                                                    <span class="timer-minutes">00</span>:<span class="timer-seconds">00</span>
                                                </div>
                                                <div class="timer-progress">
                                                    <div class="timer-progress-bar"></div>
                                                </div>
                                            </div>
                                            
                                            <h6 class="mb-2">Presets</h6>
                                            <div class="d-flex flex-wrap gap-2 mb-3 timer-presets-rest">
                                                <button type="button" class="btn btn-sm btn-outline-info timer-preset-btn" data-seconds="30" data-type="rest">
                                                    30s Rest
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-info timer-preset-btn" data-seconds="60" data-type="rest">
                                                    1m Rest
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-info timer-preset-btn" data-seconds="90" data-type="rest">
                                                    1:30m Rest
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-info timer-preset-btn" data-seconds="120" data-type="rest">
                                                    2m Rest
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-info timer-preset-btn" data-seconds="180" data-type="rest">
                                                    3m Rest
                                                </button>
                                            </div>
                                            
                                            <div class="d-flex flex-wrap gap-2 mb-3 timer-presets-exercise" style="display: none !important;">
                                                <button type="button" class="btn btn-sm btn-outline-success timer-preset-btn" data-seconds="30" data-type="exercise">
                                                    30s Exercise
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-success timer-preset-btn" data-seconds="45" data-type="exercise">
                                                    45s Exercise
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-success timer-preset-btn" data-seconds="60" data-type="exercise">
                                                    1m Exercise
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-success timer-preset-btn" data-seconds="90" data-type="exercise">
                                                    1:30m Exercise
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-success timer-preset-btn" data-seconds="120" data-type="exercise">
                                                    2m Exercise
                                                </button>
                                            </div>
                                            
                                            <div class="input-group mb-4">
                                                <input type="number" min="1" max="3600" class="form-control timer-custom-input" placeholder="Custom time (seconds)">
                                                <button class="btn btn-outline-secondary timer-custom-set" type="button">Set</button>
                                            </div>
                                            
                                            <div class="timer-controls d-flex gap-2 mb-4">
                                                <button class="btn btn-lg btn-primary timer-start flex-grow-1" disabled>
                                                    <i class="bi bi-play-fill me-1"></i>Start
                                                </button>
                                                <button class="btn btn-lg btn-warning timer-pause flex-grow-1" disabled>
                                                    <i class="bi bi-pause-fill me-1"></i>Pause
                                                </button>
                                                <button class="btn btn-lg btn-danger timer-stop flex-grow-1" disabled>
                                                    <i class="bi bi-stop-fill me-1"></i>Stop
                                                </button>
                                            </div>
                                            
                                            <div class="row">
                                                <div class="col-6">
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" id="timerVibrateToggle" checked>
                                                        <label class="form-check-label" for="timerVibrateToggle">Vibration</label>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" id="timerSoundToggle" checked>
                                                        <label class="form-check-label" for="timerSoundToggle">Sound</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Workout Modal -->
<div class="modal fade" id="newWorkoutModal" tabindex="-1" aria-labelledby="newWorkoutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newWorkoutModalLabel">Start New Workout</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    You already have an active workout session. Starting a new one will finish the current session.
                </p>
                <form method="post" asp-page-handler="CreateSession" id="newWorkoutForm">
                    <input type="hidden" name="finishCurrent" value="true" />
                    <div class="mb-3">
                        <label for="newSessionName" class="form-label">New Session Name</label>
                        <input type="text" class="form-control" id="newSessionName" name="NewSessionName" 
                               value="@Model.QuickWorkout.NewSessionName" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="newWorkoutForm" class="btn btn-primary">
                    <i class="bi bi-play-fill me-1"></i> Start New Workout
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/workout-timer.js" asp-append-version="true"></script>
    <script>
        // JavaScript to make exercise cards clickable to prefill the form
        document.addEventListener('DOMContentLoaded', function() {
            const exerciseCards = document.querySelectorAll('.quick-exercise-card');
            const exerciseSelect = document.getElementById('QuickWorkout_ExerciseTypeId');
            const weightInput = document.getElementById('QuickWorkout_Weight');
            const repsInput = document.getElementById('QuickWorkout_NumberReps');
            const timerTab = document.getElementById('timer-tab');
            
            // Function to visually select an exercise card
            function selectExerciseCard(card) {
                // Remove highlight from all cards
                exerciseCards.forEach(c => c.classList.remove('border-primary', 'bg-light'));
                
                // Add highlight to the selected card
                card.classList.add('border-primary', 'bg-light');
                
                // Get the exercise data
                const exerciseId = card.getAttribute('data-exercise-id');
                const exerciseName = card.getAttribute('data-exercise-name');
                
                // Set the selected value in the dropdown
                if (exerciseSelect) {
                    exerciseSelect.value = exerciseId;
                    
                    // Trigger a change event on the select element
                    const event = new Event('change', { bubbles: true });
                    exerciseSelect.dispatchEvent(event);
                    
                    // Scroll to the form section
                    document.querySelector('.card:has(#QuickWorkout_ExerciseTypeId)').scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center' 
                    });
                    
                    // Optional: focus the weight input for quick entry
                    if (weightInput) {
                        // Short delay to ensure smooth UX
                        setTimeout(() => {
                            weightInput.focus();
                        }, 300);
                    }
                }
            }
            
            // Add click event to all exercise cards
            exerciseCards.forEach(card => {
                card.addEventListener('click', function() {
                    selectExerciseCard(this);
                });
            });
            
            // If an exercise was previously selected, highlight its card on page load
            if (exerciseSelect && exerciseSelect.value) {
                const selectedId = exerciseSelect.value;
                const selectedCard = document.querySelector(`.quick-exercise-card[data-exercise-id="${selectedId}"]`);
                if (selectedCard) {
                    selectExerciseCard(selectedCard);
                }
            }
            
            // Initialize timer interface when the timer tab is activated
            timerTab.addEventListener('shown.bs.tab', function (e) {
                if (window.workoutTimer) {
                    window.workoutTimer.initializeTabInterface();
                }
            });
            
            // Switch to timer tab after adding a set (if form was submitted)
            const formAddSet = document.querySelector('form[asp-page-handler="AddSet"]');
            if (formAddSet) {
                formAddSet.addEventListener('submit', function(e) {
                    // Store in session storage that we should switch to timer tab after page reload
                    sessionStorage.setItem('switchToTimerTab', 'true');
                });
            }
            
            // Check if we need to switch to timer tab (after form submission and page reload)
            if (sessionStorage.getItem('switchToTimerTab') === 'true') {
                // Clear the flag
                sessionStorage.removeItem('switchToTimerTab');
                
                // Short delay to ensure page is fully loaded
                setTimeout(() => {
                    // Click the timer tab
                    timerTab.click();
                    
                    // Start a default rest timer (30 seconds)
                    if (window.workoutTimer) {
                        window.workoutTimer.setTimerType('rest');
                        window.workoutTimer.setTime(30);
                        window.workoutTimer.start();
                    }
                }, 300);
            }
            
            // Add some keyboard shortcuts for power users
            document.addEventListener('keydown', function(e) {
                // Only process if not inside an input field
                if (e.target.tagName !== 'INPUT' && e.target.tagName !== 'SELECT' && e.target.tagName !== 'TEXTAREA') {
                    // Press 'w' to focus weight input
                    if (e.key === 'w' && weightInput) {
                        e.preventDefault();
                        weightInput.focus();
                    }
                    // Press 'r' to focus reps input
                    else if (e.key === 'r' && repsInput) {
                        e.preventDefault();
                        repsInput.focus();
                    }
                    // Press 't' to open timer tab
                    else if (e.key === 't') {
                        e.preventDefault();
                        timerTab.click();
                        triggerHapticFeedback('light');
                    }
                }
            });

            // Add event listener to floating timer button - now switch to timer tab
            document.getElementById('floating-timer-button')?.addEventListener('click', function() {
                timerTab.click();
                triggerHapticFeedback('medium');
            });
            
            // Timer type selector buttons
            document.querySelectorAll('.timer-type-selector').forEach(btn => {
                btn.addEventListener('click', function() {
                    // Remove active class from all type selector buttons
                    document.querySelectorAll('.timer-type-selector').forEach(b => {
                        b.classList.remove('active');
                        b.classList.remove('btn-info', 'btn-success');
                        b.classList.add('btn-outline-info', 'btn-outline-success');
                    });
                    
                    // Add active class to clicked button
                    this.classList.add('active');
                    
                    // Add appropriate color based on timer type
                    const timerType = this.getAttribute('data-timer-type');
                    if (timerType === 'rest') {
                        this.classList.remove('btn-outline-info');
                        this.classList.add('btn-info');
                        // Show rest presets, hide exercise presets
                        document.querySelector('.timer-presets-rest').style.display = 'flex';
                        document.querySelector('.timer-presets-exercise').style.display = 'none';
                    } else {
                        this.classList.remove('btn-outline-success');
                        this.classList.add('btn-success');
                        // Show exercise presets, hide rest presets
                        document.querySelector('.timer-presets-rest').style.display = 'none';
                        document.querySelector('.timer-presets-exercise').style.display = 'flex';
                    }
                    
                    // Update timer type
                    if (window.workoutTimer) {
                        window.workoutTimer.setTimerType(timerType);
                    }
                });
            });
            
            // Initialize with exercise timer selected
            document.querySelector('.timer-presets-rest').style.display = 'flex';
            document.querySelector('.timer-presets-exercise').style.display = 'none';
            
            // Timer preset buttons
            document.querySelectorAll('.timer-preset-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const seconds = parseInt(this.getAttribute('data-seconds'));
                    const type = this.getAttribute('data-type');
                    
                    if (window.workoutTimer) {
                        window.workoutTimer.setTimerType(type);
                        window.workoutTimer.setTime(seconds);
                        
                        // Update selector buttons UI to match the timer type
                        document.querySelectorAll('.timer-type-selector').forEach(b => {
                            b.classList.remove('active', 'btn-info', 'btn-success');
                            b.classList.add(b.getAttribute('data-timer-type') === 'rest' ? 'btn-outline-info' : 'btn-outline-success');
                            
                            if (b.getAttribute('data-timer-type') === type) {
                                b.classList.add('active');
                                b.classList.remove(type === 'rest' ? 'btn-outline-info' : 'btn-outline-success');
                                b.classList.add(type === 'rest' ? 'btn-info' : 'btn-success');
                            }
                        });
                        
                        // Show appropriate presets
                        document.querySelector('.timer-presets-rest').style.display = type === 'rest' ? 'flex' : 'none';
                        document.querySelector('.timer-presets-exercise').style.display = type === 'exercise' ? 'flex' : 'none';
                    }
                });
            });
            
            // Custom timer input
            const customTimeInput = document.querySelector('.timer-custom-input');
            const customTimeSetBtn = document.querySelector('.timer-custom-set');
            
            customTimeSetBtn.addEventListener('click', function() {
                const seconds = parseInt(customTimeInput.value);
                if (seconds && seconds > 0) {
                    if (window.workoutTimer) {
                        window.workoutTimer.setTime(seconds);
                        triggerHapticFeedback('light');
                    }
                }
            });
            
            // Timer control buttons
            const startBtn = document.querySelector('.timer-start');
            const pauseBtn = document.querySelector('.timer-pause');
            const stopBtn = document.querySelector('.timer-stop');
            
            startBtn.addEventListener('click', function() {
                if (window.workoutTimer) {
                    window.workoutTimer.start();
                    triggerHapticFeedback('medium');
                }
            });
            
            pauseBtn.addEventListener('click', function() {
                if (window.workoutTimer) {
                    if (window.workoutTimer.isPaused) {
                        window.workoutTimer.resume();
                        this.innerHTML = '<i class="bi bi-play-fill me-1"></i>Resume';
                    } else {
                        window.workoutTimer.pause();
                        this.innerHTML = '<i class="bi bi-pause-fill me-1"></i>Pause';
                    }
                    triggerHapticFeedback('light');
                }
            });
            
            stopBtn.addEventListener('click', function() {
                if (window.workoutTimer) {
                    window.workoutTimer.stop();
                    pauseBtn.innerHTML = '<i class="bi bi-pause-fill me-1"></i>Pause';
                    triggerHapticFeedback('medium');
                }
            });
            
            // Toggle switches
            const vibrateToggle = document.getElementById('timerVibrateToggle');
            const soundToggle = document.getElementById('timerSoundToggle');
            
            vibrateToggle.addEventListener('change', function() {
                if (window.workoutTimer) {
                    window.workoutTimer.options.vibrate = this.checked;
                }
            });
            
            soundToggle.addEventListener('change', function() {
                if (window.workoutTimer) {
                    window.workoutTimer.options.sound = this.checked;
                }
            });
            
            // Expose the triggerHapticFeedback function globally for timer.js to use
            window.triggerHapticFeedback = function(intensity) {
                if (navigator.vibrate && vibrateToggle.checked) {
                    switch (intensity) {
                        case 'light':
                            navigator.vibrate(10);
                            break;
                        case 'medium':
                            navigator.vibrate(25);
                            break;
                        case 'strong':
                            navigator.vibrate([25, 30, 40]);
                            break;
                        case 'alert':
                            navigator.vibrate([100, 100, 100, 100, 100]);
                            break;
                        default:
                            navigator.vibrate(10);
                    }
                }
            };

            // Muscle group filter buttons
            const muscleGroupFilters = document.querySelectorAll('#muscle-group-filters button');
            const exerciseContainer = document.querySelector('#muscle .row:not(:first-child)');
            
            // Store previously loaded exercises by muscle group
            const cachedExercises = {};
            
            // Function to fetch exercises by muscle group via AJAX
            async function fetchExercisesByMuscleGroup(muscleGroup) {
                // Check if we already have cached data for this muscle group
                if (cachedExercises[muscleGroup]) {
                    return cachedExercises[muscleGroup];
                }
                
                try {
                    // Fetch data from the server
                    const response = await fetch(`?handler=ExercisesByMuscleGroup&muscleGroup=${encodeURIComponent(muscleGroup)}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    
                    const data = await response.json();
                    
                    // Cache the data
                    cachedExercises[muscleGroup] = data;
                    
                    return data;
                } catch (error) {
                    console.error('Error fetching exercises:', error);
                    return null;
                }
            }
            
            // Function to generate HTML for an exercise card
            function createExerciseCardHtml(exercise) {
                return `
                <div class="col">
                    <div class="card h-100 quick-exercise-card" 
                         data-exercise-id="${exercise.id}" 
                         data-exercise-name="${exercise.name}">
                        <div class="card-body p-2">
                            <h6 class="card-title mb-1">${exercise.name}</h6>
                            <p class="card-text small text-muted mb-0">
                                ${exercise.muscle}
                            </p>
                        </div>
                    </div>
                </div>`;
            }
            
            // Function to update the UI with exercises for a specific muscle group
            async function updateExercisesForMuscleGroup(muscleGroup) {
                // Show loading state
                exerciseContainer.innerHTML = '<div class="col-12 text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                
                // Reset all button styles
                muscleGroupFilters.forEach(btn => {
                    btn.classList.remove('btn-primary');
                    btn.classList.add('btn-outline-secondary');
                });
                
                // Highlight the selected button
                const activeButton = Array.from(muscleGroupFilters).find(btn => btn.getAttribute('data-muscle-group') === muscleGroup);
                if (activeButton) {
                    activeButton.classList.remove('btn-outline-secondary');
                    activeButton.classList.add('btn-primary');
                }
                
                // If muscle group is empty, show the default message
                if (!muscleGroup) {
                    exerciseContainer.innerHTML = '<div class="col-12"><p class="text-muted">Select a muscle group to view exercises</p></div>';
                    return;
                }
                
                // Fetch the exercises
                const exercises = await fetchExercisesByMuscleGroup(muscleGroup);
                
                // Update the UI based on the response
                if (!exercises || exercises.length === 0) {
                    exerciseContainer.innerHTML = '<div class="col-12"><p class="text-muted">No exercises found for this muscle group</p></div>';
                    return;
                }
                
                // Generate HTML for all exercise cards
                let exerciseCardsHtml = '';
                exercises.forEach(exercise => {
                    exerciseCardsHtml += createExerciseCardHtml(exercise);
                });
                
                // Update the container with the new cards
                exerciseContainer.innerHTML = exerciseCardsHtml;
                
                // Attach click events to the new exercise cards
                const newExerciseCards = exerciseContainer.querySelectorAll('.quick-exercise-card');
                newExerciseCards.forEach(card => {
                    card.addEventListener('click', function() {
                        selectExerciseCard(this);
                    });
                });
            }
            
            // Add click event to muscle group filter buttons
            muscleGroupFilters.forEach(btn => {
                btn.addEventListener('click', function() {
                    const muscleGroup = this.getAttribute('data-muscle-group');
                    
                    // Update exercises without page reload
                    updateExercisesForMuscleGroup(muscleGroup);
                    
                    // Push state to browser history (for back button) without reloading
                    const url = new URL(window.location);
                    url.searchParams.set('muscleGroup', muscleGroup);
                    history.pushState({muscleGroup: muscleGroup}, '', url);
                });
            });
            
            // Handle browser back/forward navigation
            window.addEventListener('popstate', function(event) {
                const state = event.state || {};
                const muscleGroup = state.muscleGroup || '';
                
                // Update exercises based on new state
                updateExercisesForMuscleGroup(muscleGroup);
            });
            
            // On page load, if there's a muscle group in the URL, show its exercises
            const urlParams = new URLSearchParams(window.location.search);
            const initialMuscleGroup = urlParams.get('muscleGroup');
            if (initialMuscleGroup) {
                // Slight delay to ensure DOM is ready
                setTimeout(() => {
                    // Make sure muscle tab is active if coming from a direct link
                    if (!document.querySelector('#muscle').classList.contains('active')) {
                        document.getElementById('muscle-tab').click();
                    }
                    updateExercisesForMuscleGroup(initialMuscleGroup);
                }, 100);
            }

            // Set row click handling - navigate to timer tab
            const recentSetRows = document.querySelectorAll('table.table-striped tbody tr');
            recentSetRows.forEach(row => {
                row.style.cursor = 'pointer';
                row.addEventListener('click', function() {
                    // Activate the timer tab
                    document.getElementById('timer-tab').click();
                    
                    // Optional: Start a rest timer 
                    if (window.workoutTimer) {
                        window.workoutTimer.setTimerType('rest');
                        window.workoutTimer.setTime(60); // Default 60-second rest
                        window.workoutTimer.start();
                    }
                    
                    // Provide haptic feedback
                    triggerHapticFeedback('medium');
                });
            });
        });
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/workout-timer.css" asp-append-version="true" />
    <style>
        .quick-exercise-card {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .quick-exercise-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15);
            border-color: var(--bs-primary);
        }
        
        /* Improved tab styling */
        .nav-tabs .nav-link {
            color: #666;
            background-color: rgba(0,0,0,0.03);
            border-radius: 0;
            border-bottom: none;
            position: relative;
            transition: all 0.2s ease;
        }
        
        .nav-tabs .nav-link:hover {
            color: var(--bs-primary);
            background-color: rgba(13,110,253,0.04);
        }
        
        .nav-tabs .nav-link.active {
            color: var(--bs-primary);
            background-color: #fff;
            border-top: 3px solid var(--bs-primary);
            border-bottom: none;
        }
        
        /* Timer styles */
        .timer-display {
            font-family: monospace;
            font-size: 3rem;
            font-weight: bold;
            margin: 1.5rem 0;
        }
        
        .timer-progress {
            height: 6px;
            background-color: #e9ecef;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 2rem;
        }
        
        .timer-progress-bar {
            height: 100%;
            background-color: var(--bs-primary);
            width: 100%;
            transition: width 1s linear;
        }
        
        .timer-card {
            box-shadow: 0 .25rem .5rem rgba(0,0,0,.1);
        }
        
        /* Touch-friendly sizing for mobile */
        @@media (max-width: 768px) {
            .quick-exercise-card .card-body {
                min-height: 70px;
                padding: 0.75rem !important;
            }
            
            .btn {
                padding: 0.5rem 0.75rem;
            }
            
            input[type="number"], 
            select.form-select {
                height: 50px;
                font-size: 1.1rem;
            }
            
            .form-check-input {
                width: 1.5em;
                height: 1.5em;
                margin-top: 0.1em;
            }
            
            .form-check-label {
                font-size: 1.1rem;
                padding-left: 0.5rem;
            }
            
            /* Improved tab sizing for mobile */
            .nav-tabs .nav-link {
                font-size: 0.95rem;
                padding: 0.75rem 0.5rem;
            }
            
            .nav-tabs .nav-link i {
                margin-right: 0.25rem !important;
            }

            /* Add extra bottom padding for floating timer button */
            .container-fluid {
                padding-bottom: 80px;
            }
            
            /* Make timer display bigger on mobile */
            .timer-display {
                font-size: 3.5rem;
            }
        }
    </style>
}