@page
@using WorkoutTrackerWeb.Extensions
@model WorkoutTrackerWeb.Pages.Workouts.QuickWorkoutModel
@{
    ViewData["Title"] = "Quick Workout";
    var statusAlert = !string.IsNullOrEmpty(Model.StatusMessage) ? "alert-info" : "";
}

<div class="container-fluid mt-3 quick-workout-container">
    <h2 class="display-6">Quick Workout</h2>
    <p class="lead">Add exercises with minimal clicks - optimized for gym use.</p>

    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        <div class="alert @statusAlert alert-dismissible fade show" role="alert">
            @Model.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Timer container div -->
    <div id="timer-container"></div>

    <!-- Floating timer button (mobile only) -->
    <button type="button" class="floating-timer-button" id="floating-timer-button" aria-label="Timer">
        <i class="bi bi-stopwatch"></i>
    </button>

    <!-- Reordering container for mobile UI - Active Session moves to bottom -->
    <div class="row g-3 mb-4 workout-session-container">
        <!-- Add set card - always at the top -->
        <div class="col-12 col-md-6 order-1">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-plus-circle-dotted me-2"></i>Add Set
                    </h5>
                </div>
                <div class="card-body">
                    @if (!Model.QuickWorkout.HasActiveSession)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Start a session first to add exercises
                        </div>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="AddSet">
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.ExerciseTypeId" class="form-label">Exercise</label>
                                        <select asp-for="QuickWorkout.ExerciseTypeId" class="form-select" required>
                                            <option value="">-- Select Exercise --</option>
                                            @foreach (var exercise in Model.QuickWorkout.ExerciseTypes)
                                            {
                                                <option value="@exercise.ExerciseTypeId">@exercise.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.SettypeId" class="form-label">Set Type</label>
                                        <select asp-for="QuickWorkout.SettypeId" class="form-select" required>
                                            <option value="">-- Select Type --</option>
                                            @foreach (var setType in Model.QuickWorkout.SetTypes)
                                            {
                                                <option value="@setType.SettypeId">@setType.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.Weight" class="form-label">Weight (kg)</label>
                                        <input asp-for="QuickWorkout.Weight" class="form-control" type="number" step="0.5" required />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.NumberReps" class="form-label">Reps</label>
                                        <input asp-for="QuickWorkout.NumberReps" class="form-control" type="number" required />
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-success w-100">
                                <i class="bi bi-plus-lg me-1"></i> Add Set
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>

        <!-- Active session card -->
        <div class="col-12 col-md-6 order-2 order-md-1 active-session-container">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex align-items-center">
                    <h5 class="mb-0">
                        @if (Model.QuickWorkout.HasActiveSession)
                        {
                            <span class="text-success">
                                <i class="bi bi-play-circle-fill me-2"></i>Active Session
                            </span>
                        }
                        else
                        {
                            <span class="text-secondary">
                                <i class="bi bi-plus-circle me-2"></i>Start New Session
                            </span>
                        }
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.QuickWorkout.HasActiveSession && Model.QuickWorkout.CurrentSession != null)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="card-title mb-0">@Model.QuickWorkout.CurrentSession.Name</h5>
                            <span class="badge bg-primary">
                                Started @Model.QuickWorkout.CurrentSession.StartDateTime.ToString("HH:mm")
                            </span>
                        </div>
                        <div class="d-flex gap-2 mt-2">
                            <a asp-page="/Sessions/Details" asp-route-id="@Model.QuickWorkout.CurrentSession.WorkoutSessionId" 
                               class="btn btn-outline-primary flex-grow-1">
                                <i class="bi bi-eye me-1"></i> View Details
                            </a>
                            <button type="button" class="btn btn-outline-success flex-grow-1" 
                                   data-bs-toggle="modal" data-bs-target="#finishWorkoutModal">
                                <i class="bi bi-check-circle me-1"></i> Finish Workout
                            </button>
                        </div>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="CreateSession">
                            <div class="mb-3">
                                <label for="NewSessionName" class="form-label">Session Name</label>
                                <input type="text" class="form-control" id="NewSessionName" name="NewSessionName" 
                                       value="@($"Quick Workout {DateTime.Now:yyyy-MM-dd HH:mm}")" />
                            </div>
                            <div class="mb-3">
                                <label for="StartTime" class="form-label">Start Time</label>
                                <input type="datetime-local" class="form-control" id="StartTime" name="StartTime" 
                                       value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                            </div>
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="bi bi-play-fill me-1"></i> Start Workout
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3 mb-4">
        <!-- Recent sets card -->
        @if (Model.QuickWorkout.HasActiveSession && Model.QuickWorkout.RecentWorkoutSets.Any())
        {
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-clock-history me-2"></i>Recent Sets
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Exercise</th>
                                        <th>Weight</th>
                                        <th>Reps</th>
                                        <th>Type</th>
                                        <th>Notes</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var set in Model.QuickWorkout.RecentWorkoutSets)
                                    {
                                        <tr id="set-row-@set.WorkoutSetId" data-set-id="@set.WorkoutSetId">
                                            <td>@set.WorkoutExercise.ExerciseType?.Name</td>
                                            <td>@(set.Weight?.ToString("N1") ?? "-") kg</td>
                                            <td>@(set.Reps?.ToString() ?? "-")</td>
                                            <td>@(set.Settype?.Name ?? "Regular")</td>
                                            <td>@set.Notes</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-primary edit-set-btn" data-set-id="@set.WorkoutSetId" title="Edit">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-info clone-set-btn" data-set-id="@set.WorkoutSetId" title="Clone">
                                                        <i class="bi bi-files"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger delete-set-btn" data-set-id="@set.WorkoutSetId" title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Exercise selection tabs - Only shown when a workout is active -->
    @if (Model.QuickWorkout.HasActiveSession)
    {
        <div class="row g-3 mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-light p-0">
                        <ul class="nav nav-tabs nav-fill card-header-tabs border-bottom-0" id="exerciseTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="by-muscle-tab" data-bs-toggle="tab" 
                                        data-bs-target="#by-muscle" type="button" role="tab">By Muscle</button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="recent-tab" data-bs-toggle="tab" 
                                        data-bs-target="#recent" type="button" role="tab">Recent</button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="favorites-tab" data-bs-toggle="tab" 
                                        data-bs-target="#favorites" type="button" role="tab">Favorites</button>
                            </li>
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" id="exerciseTabsContent">
                            <!-- By Muscle Tab -->
                            <div class="tab-pane fade show active" id="by-muscle" role="tabpanel">
                                <div id="muscle-group-list" class="d-flex flex-wrap gap-2 mb-3">
                                    @foreach (var muscleGroup in Model.QuickWorkout.MuscleGroups)
                                    {
                                        <button type="button" class="btn btn-outline-primary wordcloud-btn" data-muscle="@muscleGroup">
                                            @muscleGroup.ToTitleCase()
                                        </button>
                                    }
                                    <button type="button" class="btn btn-outline-secondary wordcloud-btn" data-muscle="Other">Other</button>
                                </div>
                                <button id="back-to-muscles-btn" type="button" class="btn btn-link mb-2" style="display:none;">
                                    <i class="bi bi-arrow-left"></i> Back to Muscle Groups
                                </button>
                                <div id="exercise-list" class="list-group mb-2" style="display:none;"></div>
                            </div>
                            <!-- Recent Tab -->
                            <div class="tab-pane fade" id="recent" role="tabpanel">
                                <div class="list-group">
                                    @foreach (var exercise in Model.QuickWorkout.RecentExercises)
                                    {
                                        <button type="button" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" 
                                                onclick="selectExercise(@exercise.ExerciseType.ExerciseTypeId, '@exercise.ExerciseType.Name')">
                                            @exercise.ExerciseType.Name
                                            <span class="badge bg-primary rounded-pill">@exercise.UseCount</span>
                                        </button>
                                    }
                                </div>
                            </div>
                            <!-- Favorites Tab -->
                            <div class="tab-pane fade" id="favorites" role="tabpanel">
                                <div class="list-group">
                                    @foreach (var exercise in Model.QuickWorkout.FavoriteExercises)
                                    {
                                        <button type="button" class="list-group-item list-group-item-action" 
                                                onclick="selectExercise(@exercise.ExerciseTypeId, '@exercise.Name')">
                                            @exercise.Name
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row g-3 mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-play-circle text-muted" style="font-size: 2.5rem;"></i>
                        <h4 class="text-muted mt-3">Start a workout to see exercise options</h4>
                        <p class="text-muted">Exercise selection will be available once you begin your session</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Finish Workout Modal -->
<div class="modal fade" id="finishWorkoutModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Finish Workout</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you ready to finish this workout session?</p>
                <form method="post" asp-page-handler="CreateSession">
                    <input type="hidden" name="finishCurrent" value="true" />
                    <div class="mb-3">
                        <label for="newSessionName" class="form-label">Start a new session? (Optional)</label>
                        <input type="text" class="form-control" id="NewSessionName" name="NewSessionName" 
                               placeholder="Leave blank to just finish current session" />
                    </div>
                    <div class="mb-3">
                        <label for="StartTime" class="form-label">Start Time</label>
                        <input type="datetime-local" class="form-control" id="StartTime" name="StartTime" 
                               value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                    </div>
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-success">
                            <i class="bi bi-check-circle me-1"></i>Finish & Start New
                        </button>
                        <button type="submit" class="btn btn-outline-secondary" formnovalidate>
                            <i class="bi bi-check me-1"></i>Just Finish
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Set Modal -->
<div class="modal fade" id="editSetModal" tabindex="-1" aria-labelledby="editSetModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editSetModalLabel">Edit Set</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editSetId">
                <input type="hidden" id="editExerciseId">
                
                <div class="mb-3">
                    <label for="editWeight" class="form-label">Weight (kg)</label>
                    <input type="number" class="form-control" id="editWeight" step="0.5" min="0">
                </div>
                
                <div class="mb-3">
                    <label for="editReps" class="form-label">Reps</label>
                    <input type="number" class="form-control" id="editReps" min="0">
                </div>
                
                <div class="mb-3">
                    <label for="editSetType" class="form-label">Set Type</label>
                    <select class="form-select" id="editSetType">
                        <!-- Will be populated dynamically -->
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="editNotes" class="form-label">Notes</label>
                    <input type="text" class="form-control" id="editNotes">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveSetChanges">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this set? This action cannot be undone.
                <input type="hidden" id="deleteSetId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Word cloud style for muscle group buttons */
    #muscle-group-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5em 0.5em;
        align-items: flex-end;
        justify-content: flex-start;
        margin-bottom: 1em;
    }
    .wordcloud-btn {
        border-radius: 2em;
        transition: box-shadow 0.2s, background 0.2s, color 0.2s;
        box-shadow: 0 1px 4px rgba(0,0,0,0.04);
        padding: 0.3em 1.2em;
        line-height: 1.2;
        margin-right: 0.2em;
        margin-bottom: 0.2em;
    }
    .wordcloud-btn:hover, .wordcloud-btn:focus {
        background: #0d6efd;
        color: #fff;
        box-shadow: 0 2px 8px rgba(13,110,253,0.12);
    }
</style>

@section Scripts {
    <script src="~/js/quickworkout-drilldown.js"></script>
    <script>
        window.quickWorkoutAllExercises = [
            @foreach (var ex in Model.QuickWorkout.ExerciseTypes)
            {
                <text>{ exerciseTypeId: @ex.ExerciseTypeId, name: '@ex.Name.Replace("'", "\'")', muscle: '@(ex.Muscle ?? ex.PrimaryMuscleGroup ?? "Other")' },</text>
            }
        ];
        window.quickWorkoutMuscleGroups = [
            @foreach (var mg in Model.QuickWorkout.MuscleGroups.Distinct())
            {
                <text>'@mg',</text>
            }
        ];
        function selectExercise(id, name) {
            var dropdown = document.querySelector('select[name="QuickWorkout.ExerciseTypeId"]');
            if (dropdown) {
                dropdown.value = id;
                dropdown.dispatchEvent(new Event('change'));
            }
        }
        
        // Add event handlers for the workout sets actions
        $(document).ready(function() {
            const settypeOptions = [];
            
            // Load set types
            loadSetTypes();
            
            // Event handlers
            $(document).on('click', '.edit-set-btn', function() {
                const setId = $(this).data('set-id');
                loadSetDetails(setId);
            });
            
            $(document).on('click', '.delete-set-btn', function() {
                const setId = $(this).data('set-id');
                $('#deleteSetId').val(setId);
                $('#confirmDeleteModal').modal('show');
            });
            
            $(document).on('click', '.clone-set-btn', function() {
                const setId = $(this).data('set-id');
                cloneSet(setId);
            });
            
            $('#saveSetChanges').click(function() {
                updateSet();
            });
            
            $('#confirmDeleteBtn').click(function() {
                deleteSet($('#deleteSetId').val());
            });
            
            function loadSetTypes() {
                $.ajax({
                    url: '/api/WorkoutSetsApi/SettypeOptions',
                    method: 'GET',
                    success: function(data) {
                        settypeOptions.length = 0;
                        data.forEach(item => settypeOptions.push(item));
                        
                        // Pre-populate dropdowns if needed
                        populateSetTypeDropdown('#editSetType');
                    },
                    error: function(xhr) {
                        console.error('Error loading set types:', xhr);
                        showToast('Error', 'Failed to load set types. Please refresh the page.', 'error');
                    }
                });
            }
            
            function populateSetTypeDropdown(selector) {
                const dropdown = $(selector);
                dropdown.empty();
                
                // Add default option
                dropdown.append($('<option>', {
                    value: '',
                    text: 'Regular'
                }));
                
                // Add options from API
                settypeOptions.forEach(option => {
                    dropdown.append($('<option>', {
                        value: option.id,
                        text: option.name
                    }));
                });
            }
            
            function loadSetDetails(setId) {
                $.ajax({
                    url: `/api/WorkoutSetsApi/${setId}`,
                    method: 'GET',
                    success: function(data) {
                        $('#editSetId').val(data.workoutSetId);
                        $('#editExerciseId').val(data.workoutExerciseId);
                        $('#editWeight').val(data.weight);
                        $('#editReps').val(data.reps);
                        $('#editNotes').val(data.notes);
                        
                        populateSetTypeDropdown('#editSetType');
                        if (data.settypeId) {
                            $('#editSetType').val(data.settypeId);
                        }
                        
                        $('#editSetModal').modal('show');
                    },
                    error: function(xhr) {
                        console.error('Error loading set details:', xhr);
                        showToast('Error', 'Failed to load set details. Please try again.', 'error');
                    }
                });
            }
            
            function updateSet() {
                const setId = $('#editSetId').val();
                const exerciseId = $('#editExerciseId').val();
                const weight = $('#editWeight').val();
                const reps = $('#editReps').val();
                const settypeId = $('#editSetType').val() || null;
                const notes = $('#editNotes').val();
                
                const payload = {
                    workoutSetId: parseInt(setId),
                    workoutExerciseId: parseInt(exerciseId),
                    weight: weight ? parseFloat(weight) : null,
                    reps: reps ? parseInt(reps) : null,
                    settypeId: settypeId ? parseInt(settypeId) : null,
                    notes: notes,
                    isCompleted: true,
                    timestamp: new Date().toISOString()
                };
                
                $.ajax({
                    url: `/api/WorkoutSetsApi/${setId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                    success: function() {
                        $('#editSetModal').modal('hide');
                        
                        // Reload page to see updated set
                        location.reload();
                    },
                    error: function(xhr) {
                        console.error('Error updating set:', xhr);
                        showToast('Error', 'Failed to update set. Please try again.', 'error');
                    }
                });
            }
            
            function deleteSet(setId) {
                $.ajax({
                    url: `/api/WorkoutSetsApi/${setId}`,
                    method: 'DELETE',
                    success: function() {
                        $('#confirmDeleteModal').modal('hide');
                        
                        // Reload page to update UI
                        location.reload();
                    },
                    error: function(xhr) {
                        console.error('Error deleting set:', xhr);
                        $('#confirmDeleteModal').modal('hide');
                        showToast('Error', 'Failed to delete set. Please try again.', 'error');
                    }
                });
            }
            
            function cloneSet(setId) {
                $.ajax({
                    url: `/api/WorkoutSetsApi/${setId}`,
                    method: 'GET',
                    success: function(data) {
                        // Create a new payload without the ID
                        const payload = {
                            workoutExerciseId: data.workoutExerciseId,
                            weight: data.weight,
                            reps: data.reps,
                            settypeId: data.settypeId,
                            notes: data.notes ? `${data.notes} (copy)` : '(copy)',
                            isCompleted: true,
                            timestamp: new Date().toISOString()
                        };
                        
                        // Send POST request to create a clone
                        $.ajax({
                            url: '/api/WorkoutSetsApi',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(payload),
                            success: function() {
                                showToast('Success', 'Set cloned successfully. Refreshing page...', 'success');
                                // Reload page to see the new set
                                location.reload();
                            },
                            error: function(xhr) {
                                console.error('Error cloning set:', xhr);
                                showToast('Error', 'Failed to clone set. Please try again.', 'error');
                            }
                        });
                    },
                    error: function(xhr) {
                        console.error('Error fetching set details:', xhr);
                        showToast('Error', 'Failed to fetch set details for cloning. Please try again.', 'error');
                    }
                });
            }
            
            function showToast(title, message, type) {
                // Implement toast notifications or alerts
                alert(`${title}: ${message}`);
            }
        });
    </script>
}