@page
@model WorkoutTrackerWeb.Pages.Workouts.QuickWorkoutModel
@{
    ViewData["Title"] = "Quick Workout";
    var statusAlert = !string.IsNullOrEmpty(Model.QuickWorkout.StatusMessage) ? "alert-info" : "";
}

<div class="container-fluid mt-3 quick-workout-container">
    <h2 class="display-6">Quick Workout</h2>
    <p class="lead">Add exercises with minimal clicks - optimized for gym use.</p>

    @if (!string.IsNullOrEmpty(Model.QuickWorkout.StatusMessage))
    {
        <div class="alert @statusAlert alert-dismissible fade show" role="alert">
            @Model.QuickWorkout.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Timer container div -->
    <div id="timer-container"></div>

    <!-- Floating timer button (mobile only) - now this will switch to timer tab -->
    <button type="button" class="floating-timer-button" id="floating-timer-button" aria-label="Timer">
        <i class="bi bi-stopwatch"></i>
    </button>

    <!-- Reordering container for mobile UI - Active Session moves to bottom -->
    <div class="row g-3 mb-4 workout-session-container">
        <!-- Add set card - always at the top -->
        <div class="col-12 col-md-6 order-1">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-plus-circle-dotted me-2"></i>Add Set
                    </h5>
                </div>
                <div class="card-body">
                    @if (!Model.QuickWorkout.HasActiveSession)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Start a session first to add exercises
                        </div>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="AddSet">
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.ExerciseTypeId" class="form-label">Exercise</label>
                                        <select asp-for="QuickWorkout.ExerciseTypeId" class="form-select" 
                                                asp-items="Model.QuickWorkout.ExerciseTypeSelectList" required>
                                            <option value="">-- Select Exercise --</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.SettypeId" class="form-label">Set Type</label>
                                        <select asp-for="QuickWorkout.SettypeId" class="form-select" 
                                                asp-items="Model.QuickWorkout.SetTypeSelectList" required>
                                            <option value="">-- Select Type --</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.Weight" class="form-label">Weight (kg)</label>
                                        <input asp-for="QuickWorkout.Weight" type="number" min="0" step="0.5" class="form-control" required />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <label asp-for="QuickWorkout.NumberReps" class="form-label">Reps</label>
                                        <input asp-for="QuickWorkout.NumberReps" type="number" class="form-control" required />
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3 form-check">
                                <input asp-for="QuickWorkout.AllSuccessful" class="form-check-input" type="checkbox" />
                                <label asp-for="QuickWorkout.AllSuccessful" class="form-check-label">All reps successful</label>
                            </div>
                            <button type="submit" class="btn btn-success w-100">
                                <i class="bi bi-plus-lg me-1"></i> Add Set
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>

        <!-- Active session card - moved to bottom on mobile with order-2 order-md-1 -->
        <div class="col-12 col-md-6 order-2 order-md-1 active-session-container">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex align-items-center">
                    <h5 class="mb-0">
                        @if (Model.QuickWorkout.HasActiveSession)
                        {
                            <span class="text-success">
                                <i class="bi bi-play-circle-fill me-2"></i>Active Session
                            </span>
                        }
                        else
                        {
                            <span class="text-secondary">
                                <i class="bi bi-plus-circle me-2"></i>Start New Session
                            </span>
                        }
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.QuickWorkout.HasActiveSession && Model.QuickWorkout.CurrentSession != null)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="card-title mb-0">@Model.QuickWorkout.CurrentSession.Name</h5>
                            <span class="badge bg-primary">
                                Started @Model.QuickWorkout.CurrentSession.datetime.ToString("HH:mm")
                            </span>
                        </div>
                        <div class="d-flex gap-2 mt-2">
                            <a asp-page="/Sessions/Details" asp-route-id="@Model.QuickWorkout.CurrentSession.SessionId" 
                               class="btn btn-outline-primary flex-grow-1">
                                <i class="bi bi-eye me-1"></i> View Details
                            </a>
                            <button type="button" class="btn btn-outline-success flex-grow-1" 
                                   data-bs-toggle="modal" data-bs-target="#finishWorkoutModal">
                                <i class="bi bi-check-circle me-1"></i> Finish Workout
                            </button>
                        </div>
                        <div class="mt-2 d-grid">
                            <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#newWorkoutModal">
                                <i class="bi bi-plus-circle me-1"></i> Start New Workout
                            </button>
                        </div>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="CreateSession">
                            <div class="mb-3">
                                <label asp-for="QuickWorkout.NewSessionName" class="form-label">Session Name</label>
                                <input asp-for="QuickWorkout.NewSessionName" class="form-control" 
                                       value="@Model.QuickWorkout.NewSessionName" />
                            </div>
                            <div class="mb-3">
                                <label asp-for="QuickWorkout.StartTime" class="form-label">Start Time</label>
                                <input asp-for="QuickWorkout.StartTime" type="datetime-local" class="form-control" id="startTime" />
                            </div>
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="bi bi-play-fill me-1"></i> Start Workout
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3 mb-4">
        <!-- Recent sets card -->
        @if (Model.QuickWorkout.HasActiveSession && Model.QuickWorkout.RecentSets.Any())
        {
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-clock-history me-2"></i>Recent Sets
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Exercise</th>
                                        <th>Type</th>
                                        <th>Weight</th>
                                        <th>Reps</th>
                                        <th>Added</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var set in Model.QuickWorkout.RecentSets)
                                    {
                                        <tr>
                                            <td>@set.ExerciseType?.Name</td>
                                            <td>@set.Settype?.Name</td>
                                            <td>@set.Weight kg</td>
                                            <td>@set.NumberReps</td>
                                            <td>Just now</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Exercise selection tabs -->
    <div class="row g-3 mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light p-0">
                    <ul class="nav nav-tabs nav-fill card-header-tabs border-bottom-0" id="exerciseTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active py-3 fw-medium" id="recent-tab" data-bs-toggle="tab" data-bs-target="#recent" 
                                    type="button" role="tab" aria-controls="recent" aria-selected="true">
                                <i class="bi bi-clock-history me-2"></i>Recent
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link py-3 fw-medium" id="popular-tab" data-bs-toggle="tab" data-bs-target="#popular" 
                                    type="button" role="tab" aria-controls="popular" aria-selected="false">
                                <i class="bi bi-star-fill me-2"></i>Popular
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link py-3 fw-medium" id="muscle-tab" data-bs-toggle="tab" data-bs-target="#muscle" 
                                    type="button" role="tab" aria-controls="muscle" aria-selected="false">
                                <i class="bi bi-list-ul me-2"></i>By Muscle
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link py-3 fw-medium" id="timer-tab" data-bs-toggle="tab" data-bs-target="#timer" 
                                    type="button" role="tab" aria-controls="timer" aria-selected="false">
                                <i class="bi bi-stopwatch me-2"></i>Timer
                            </button>
                        </li>
                    </ul>
                </div>
                <!-- Tab content sections and the rest of the page would go here -->
            </div>
        </div>
    </div>
</div>

<!-- New Workout Modal -->
<div class="modal fade" id="newWorkoutModal" tabindex="-1" aria-labelledby="newWorkoutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newWorkoutModalLabel">Start New Workout</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    You already have an active workout session. Starting a new one will finish the current session.
                </p>
                <form method="post" asp-page-handler="CreateSession" id="newWorkoutForm">
                    <input type="hidden" name="finishCurrent" value="true" />
                    <div class="mb-3">
                        <label for="newSessionName" class="form-label">New Session Name</label>
                        <input type="text" class="form-control" id="newSessionName" name="NewSessionName" 
                               value="@Model.QuickWorkout.NewSessionName" />
                    </div>
                    <div class="mb-3">
                        <label asp-for="QuickWorkout.StartTime" class="form-label">Start Time</label>
                        <input asp-for="QuickWorkout.StartTime" type="datetime-local" class="form-control" id="startTime" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="newWorkoutForm" class="btn btn-primary">
                    <i class="bi bi-play-fill me-1"></i> Start New Workout
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Finish Workout Modal -->
<div class="modal fade" id="finishWorkoutModal" tabindex="-1" aria-labelledby="finishWorkoutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="finishWorkoutModalLabel">Finish Workout</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="FinishSession" id="finishWorkoutForm">
                    <div class="mb-3">
                        <label for="endTime" class="form-label">End Time</label>
                        <input type="datetime-local" class="form-control" id="endTime" name="QuickWorkout.EndTime" required />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="finishWorkoutForm" class="btn btn-success">
                    <i class="bi bi-check-circle me-1"></i> Confirm Finish
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // JavaScript to handle the workout timer and modal functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize datetime-local inputs with the current date/time
            const initDateTimeInput = function(inputElement) {
                if (!inputElement) return;
                
                // Format the current date and time for the datetime-local input
                const now = new Date();
                
                // Format as YYYY-MM-DDThh:mm (required format for datetime-local input)
                const year = now.getFullYear();
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const day = String(now.getDate()).padStart(2, '0');
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                
                const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
                
                // Set the input value to the current date and time
                inputElement.value = formattedDateTime;
            };
            
            // Initialize all start time inputs on page load
            const startTimeInputs = document.querySelectorAll('input[type="datetime-local"][id="startTime"]');
            startTimeInputs.forEach(function(input) {
                initDateTimeInput(input);
            });
            
            // Set up end time field in the Finish Workout modal with current date/time
            const finishWorkoutModal = document.getElementById('finishWorkoutModal');
            const endTimeInput = document.getElementById('endTime');
            
            if (finishWorkoutModal && endTimeInput) {
                finishWorkoutModal.addEventListener('show.bs.modal', function() {
                    initDateTimeInput(endTimeInput);
                    
                    // Validate that end time is after start time
                    endTimeInput.addEventListener('change', function() {
                        // Get the session start time from the UI
                        const sessionStartTimeElement = document.querySelector('.badge.bg-primary');
                        if (sessionStartTimeElement) {
                            const startTimeText = sessionStartTimeElement.innerText;
                            const startTimeMatch = startTimeText.match(/Started (\d{2}:\d{2})/);
                            
                            if (startTimeMatch && startTimeMatch[1]) {
                                const startTimeStr = startTimeMatch[1];
                                
                                // Create date objects for comparison
                                const endDateTime = new Date(endTimeInput.value);
                                
                                // Create a date object for the start time (using today's date)
                                const startDateTime = new Date();
                                const [startHours, startMinutes] = startTimeStr.split(':').map(Number);
                                startDateTime.setHours(startHours, startMinutes, 0, 0);
                                
                                // If end time is before start time, show error
                                if (endDateTime < startDateTime) {
                                    endTimeInput.setCustomValidity('End time must be after start time');
                                    // Add error styling
                                    endTimeInput.classList.add('is-invalid');
                                    
                                    // Add error message
                                    const errorDiv = document.createElement('div');
                                    errorDiv.className = 'invalid-feedback';
                                    errorDiv.textContent = 'End time must be after start time';
                                    
                                    // Remove any existing error message
                                    const existingError = endTimeInput.nextElementSibling;
                                    if (existingError && existingError.className === 'invalid-feedback') {
                                        existingError.remove();
                                    }
                                    
                                    endTimeInput.parentNode.appendChild(errorDiv);
                                } else {
                                    // Clear any validation error
                                    endTimeInput.setCustomValidity('');
                                    endTimeInput.classList.remove('is-invalid');
                                    
                                    // Remove any error message
                                    const existingError = endTimeInput.nextElementSibling;
                                    if (existingError && existingError.className === 'invalid-feedback') {
                                        existingError.remove();
                                    }
                                }
                            }
                        }
                    });
                });
            }
            
            // Initialize start time in new workout modal
            const newWorkoutModal = document.getElementById('newWorkoutModal');
            if (newWorkoutModal) {
                newWorkoutModal.addEventListener('show.bs.modal', function() {
                    const startTimeInput = newWorkoutModal.querySelector('input[type="datetime-local"][id="startTime"]');
                    if (startTimeInput) {
                        initDateTimeInput(startTimeInput);
                    }
                });
            }
        });
    </script>
}