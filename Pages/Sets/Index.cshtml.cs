using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using WorkoutTrackerWeb.Models;
using WorkoutTrackerweb.Data;

namespace WorkoutTrackerWeb.Pages.Sets
{
    public class IndexModel : PageModel
    {
        private readonly WorkoutTrackerweb.Data.WorkoutTrackerWebContext _context;

        public IndexModel(WorkoutTrackerweb.Data.WorkoutTrackerWebContext context)
        {
            _context = context;
        }

        public IList<Set> Set { get;set; } = default!;

        public async Task OnGetAsync()
        {
            Set = await _context.Set
                .Include(s => s.Exercise)
                    .ThenInclude(e => e.Session)
                .Include(s => s.Settype)
                .ToListAsync();
        }
        
        public async Task<IActionResult> OnGetDuplicateAsync(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            // Find the set to duplicate with related entities
            var setToDuplicate = await _context.Set
                .Include(s => s.Exercise)
                .Include(s => s.Settype)
                .FirstOrDefaultAsync(m => m.SetId == id);

            if (setToDuplicate == null)
            {
                return NotFound();
            }

            // Create a new set with copied properties
            var newSet = new Set
            {
                Description = setToDuplicate.Description + " (Copy)",
                Notes = setToDuplicate.Notes,
                SettypeId = setToDuplicate.SettypeId,
                ExerciseId = setToDuplicate.ExerciseId,
                NumberReps = setToDuplicate.NumberReps
                // SetId is not copied as it's the primary key and will be generated by the database
                // Reps collection is not copied - if needed, would require a separate process
            };

            // Add the new set to the database
            _context.Set.Add(newSet);
            await _context.SaveChangesAsync();

            return RedirectToPage("./Index");
        }
    }
}
